
Pacman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c4  080073c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073cc  080073cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080073d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000234  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d56  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a0  00000000  00000000  00036dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  0003b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002821f  00000000  00000000  0003c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abc6  00000000  00000000  00064bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f091f  00000000  00000000  0007f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001700b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b4c  00000000  00000000  00170104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080071b4 	.word	0x080071b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080071b4 	.word	0x080071b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <MX_ADC1_Init+0xb8>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005bc:	2201      	movs	r2, #1
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <MX_ADC1_Init+0xbc>)
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <MX_ADC1_Init+0xb4>)
 80005f6:	f001 fbd7 	bl	8001da8 <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000600:	f000 ffd2 	bl	80015a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000604:	2303      	movs	r3, #3
 8000606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800060c:	2304      	movs	r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_ADC1_Init+0xb4>)
 8000616:	f001 fd39 	bl	800208c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000620:	f000 ffc2 	bl	80015a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000624:	230a      	movs	r3, #10
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_ADC1_Init+0xb4>)
 8000632:	f001 fd2b 	bl	800208c <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f000 ffb4 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000090 	.word	0x20000090
 800064c:	40012000 	.word	0x40012000
 8000650:	0f000001 	.word	0x0f000001

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3c      	ldr	r2, [pc, #240]	; (8000764 <HAL_ADC_MspInit+0x110>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d171      	bne.n	800075a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <HAL_ADC_MspInit+0x114>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b34      	ldr	r3, [pc, #208]	; (8000768 <HAL_ADC_MspInit+0x114>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <HAL_ADC_MspInit+0x114>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <HAL_ADC_MspInit+0x114>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <HAL_ADC_MspInit+0x118>)
 80006de:	f002 fc07 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <HAL_ADC_MspInit+0x11c>)
 80006f6:	f002 fbfb 	bl	8002ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <HAL_ADC_MspInit+0x120>)
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_ADC_MspInit+0x124>)
 80006fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800071c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000720:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000728:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000740:	f002 f866 	bl	8002810 <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800074a:	f000 ff2d 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_ADC_MspInit+0x120>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020800 	.word	0x40020800
 8000770:	40020000 	.word	0x40020000
 8000774:	200000d8 	.word	0x200000d8
 8000778:	40026410 	.word	0x40026410

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x3c>)
 800078c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2038      	movs	r0, #56	; 0x38
 80007a4:	f001 fffd 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a8:	2038      	movs	r0, #56	; 0x38
 80007aa:	f002 f816 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_GPIO_Init+0xa8>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_GPIO_Init+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_GPIO_Init+0xa8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_GPIO_Init+0xa8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000842:	2308      	movs	r3, #8
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_GPIO_Init+0xac>)
 8000856:	f002 fb4b 	bl	8002ef0 <HAL_GPIO_Init>

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800

0800086c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f043 030c 	orr.w	r3, r3, #12
 800088a:	b2db      	uxtb	r3, r3
 800088c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800088e:	7bfb      	ldrb	r3, [r7, #15]
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	b2db      	uxtb	r3, r3
 8000896:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	f043 030c 	orr.w	r3, r3, #12
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008ac:	f107 0208 	add.w	r2, r7, #8
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2304      	movs	r3, #4
 80008b6:	214e      	movs	r1, #78	; 0x4e
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <lcd_send_cmd+0x5c>)
 80008ba:	f002 fe21 	bl	8003500 <HAL_I2C_Master_Transmit>
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000138 	.word	0x20000138

080008cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f043 030d 	orr.w	r3, r3, #13
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	f043 0309 	orr.w	r3, r3, #9
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	f043 030d 	orr.w	r3, r3, #13
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	f043 0309 	orr.w	r3, r3, #9
 8000908:	b2db      	uxtb	r3, r3
 800090a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2304      	movs	r3, #4
 8000916:	214e      	movs	r1, #78	; 0x4e
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <lcd_send_data+0x5c>)
 800091a:	f002 fdf1 	bl	8003500 <HAL_I2C_Master_Transmit>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000138 	.word	0x20000138

0800092c <lcd_clear>:

void lcd_clear (void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000932:	2080      	movs	r0, #128	; 0x80
 8000934:	f7ff ff9a 	bl	800086c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	e005      	b.n	800094a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800093e:	2020      	movs	r0, #32
 8000940:	f7ff ffc4 	bl	80008cc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3301      	adds	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b45      	cmp	r3, #69	; 0x45
 800094e:	ddf6      	ble.n	800093e <lcd_clear+0x12>
	}
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
    switch (row)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d003      	beq.n	8000972 <lcd_put_cur+0x18>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d005      	beq.n	800097c <lcd_put_cur+0x22>
 8000970:	e009      	b.n	8000986 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	603b      	str	r3, [r7, #0]
            break;
 800097a:	e004      	b.n	8000986 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000982:	603b      	str	r3, [r7, #0]
            break;
 8000984:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff6e 	bl	800086c <lcd_send_cmd>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <lcd_init>:


void lcd_init (void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f001 f9df 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009a2:	2030      	movs	r0, #48	; 0x30
 80009a4:	f7ff ff62 	bl	800086c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80009a8:	2005      	movs	r0, #5
 80009aa:	f001 f9d9 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009ae:	2030      	movs	r0, #48	; 0x30
 80009b0:	f7ff ff5c 	bl	800086c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80009b4:	2001      	movs	r0, #1
 80009b6:	f001 f9d3 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x30);
 80009ba:	2030      	movs	r0, #48	; 0x30
 80009bc:	f7ff ff56 	bl	800086c <lcd_send_cmd>
	HAL_Delay(10);
 80009c0:	200a      	movs	r0, #10
 80009c2:	f001 f9cd 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80009c6:	2020      	movs	r0, #32
 80009c8:	f7ff ff50 	bl	800086c <lcd_send_cmd>
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f001 f9c7 	bl	8001d60 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009d2:	2028      	movs	r0, #40	; 0x28
 80009d4:	f7ff ff4a 	bl	800086c <lcd_send_cmd>
	HAL_Delay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f001 f9c1 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009de:	2008      	movs	r0, #8
 80009e0:	f7ff ff44 	bl	800086c <lcd_send_cmd>
	HAL_Delay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 f9bb 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff ff3e 	bl	800086c <lcd_send_cmd>
	HAL_Delay(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f001 f9b5 	bl	8001d60 <HAL_Delay>
	HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f001 f9b2 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80009fc:	2006      	movs	r0, #6
 80009fe:	f7ff ff35 	bl	800086c <lcd_send_cmd>
	HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f001 f9ac 	bl	8001d60 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a08:	200c      	movs	r0, #12
 8000a0a:	f7ff ff2f 	bl	800086c <lcd_send_cmd>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a1a:	e006      	b.n	8000a2a <lcd_send_string+0x18>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff51 	bl	80008cc <lcd_send_data>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f4      	bne.n	8000a1c <lcd_send_string+0xa>
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_I2C1_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a7a:	f002 fbfd 	bl	8003278 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 fd90 	bl	80015a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8c:	f003 f83f 	bl	8003b0e <HAL_I2CEx_ConfigAnalogFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 fd87 	bl	80015a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9e:	f003 f872 	bl	8003b86 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 fd7e 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000138 	.word	0x20000138
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f002 f9ea 	bl	8002ef0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b0db      	sub	sp, #364	; 0x16c
 8000b50:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f001 f893 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f997 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f7ff fe2f 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b5e:	f7ff ff6d 	bl	8000a3c <MX_I2C1_Init>
  MX_RTC_Init();
 8000b62:	f000 fd27 	bl	80015b4 <MX_RTC_Init>
  MX_DMA_Init();
 8000b66:	f7ff fe09 	bl	800077c <MX_DMA_Init>
  MX_ADC1_Init();
 8000b6a:	f7ff fd13 	bl	8000594 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000b6e:	f000 ffe9 	bl	8001b44 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000b72:	f000 fead 	bl	80018d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b76:	f000 fef9 	bl	800196c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, XY, 2);	// start ADC in DMA mode for Multi channel
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	49ae      	ldr	r1, [pc, #696]	; (8000e38 <main+0x2ec>)
 8000b7e:	48af      	ldr	r0, [pc, #700]	; (8000e3c <main+0x2f0>)
 8000b80:	f001 f956 	bl	8001e30 <HAL_ADC_Start_DMA>


  lcd_init();
 8000b84:	f7ff ff08 	bl	8000998 <lcd_init>


  // write to CGRAM
  char pac1[] = {0x07, 0x0F, 0x1E, 0x1C, 0x1C, 0x1E, 0x0F, 0x07};
 8000b88:	4aad      	ldr	r2, [pc, #692]	; (8000e40 <main+0x2f4>)
 8000b8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b92:	e883 0003 	stmia.w	r3, {r0, r1}
  char pac2[] = {0x07, 0x0F, 0x1E, 0x1C, 0x1E, 0x1F, 0x0F, 0x00};
 8000b96:	4aab      	ldr	r2, [pc, #684]	; (8000e44 <main+0x2f8>)
 8000b98:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba0:	e883 0003 	stmia.w	r3, {r0, r1}

  char pac3[] = {0x1C, 0x1E, 0x0F, 0x07, 0x07, 0x0F, 0x1E, 0x1C};
 8000ba4:	4aa8      	ldr	r2, [pc, #672]	; (8000e48 <main+0x2fc>)
 8000ba6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bae:	e883 0003 	stmia.w	r3, {r0, r1}
  char pac4[] = {0x1C, 0x1E, 0x0F, 0x07, 0x0F, 0x1F, 0x1E, 0x00};
 8000bb2:	4aa6      	ldr	r2, [pc, #664]	; (8000e4c <main+0x300>)
 8000bb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbc:	e883 0003 	stmia.w	r3, {r0, r1}

  char enemy[] = {0x1F, 0x15, 0x1F, 0x1F, 0x0E, 0x0A, 0x0A, 0x1B};
 8000bc0:	4aa3      	ldr	r2, [pc, #652]	; (8000e50 <main+0x304>)
 8000bc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bca:	e883 0003 	stmia.w	r3, {r0, r1}

  lcd_send_cmd(0x40);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f7ff fe4c 	bl	800086c <lcd_send_cmd>
  for(int i=0; i<8; i++) lcd_send_data(pac1[i]);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000bda:	e00d      	b.n	8000bf8 <main+0xac>
 8000bdc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe6f 	bl	80008cc <lcd_send_data>
 8000bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	dded      	ble.n	8000bdc <main+0x90>

  lcd_send_cmd(0x40+8);
 8000c00:	2048      	movs	r0, #72	; 0x48
 8000c02:	f7ff fe33 	bl	800086c <lcd_send_cmd>
  for(int i=0; i<8; i++) lcd_send_data(pac2[i]);
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000c0c:	e00d      	b.n	8000c2a <main+0xde>
 8000c0e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe56 	bl	80008cc <lcd_send_data>
 8000c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000c24:	3301      	adds	r3, #1
 8000c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	dded      	ble.n	8000c0e <main+0xc2>

  lcd_send_cmd(0x40+16);
 8000c32:	2050      	movs	r0, #80	; 0x50
 8000c34:	f7ff fe1a 	bl	800086c <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(pac3[i]);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c3e:	e00d      	b.n	8000c5c <main+0x110>
 8000c40:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c48:	4413      	add	r3, r2
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe3d 	bl	80008cc <lcd_send_data>
 8000c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	dded      	ble.n	8000c40 <main+0xf4>

  lcd_send_cmd(0x40+24);
 8000c64:	2058      	movs	r0, #88	; 0x58
 8000c66:	f7ff fe01 	bl	800086c <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(pac4[i]);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000c70:	e00d      	b.n	8000c8e <main+0x142>
 8000c72:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe24 	bl	80008cc <lcd_send_data>
 8000c84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	dded      	ble.n	8000c72 <main+0x126>

  lcd_send_cmd(0x40+32);
 8000c96:	2060      	movs	r0, #96	; 0x60
 8000c98:	f7ff fde8 	bl	800086c <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(enemy[i]);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000ca2:	e00d      	b.n	8000cc0 <main+0x174>
 8000ca4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fe0b 	bl	80008cc <lcd_send_data>
 8000cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	dded      	ble.n	8000ca4 <main+0x158>

  lcd_put_cur(0, 0);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fe45 	bl	800095a <lcd_put_cur>
  lcd_send_string("press the button");
 8000cd0:	4860      	ldr	r0, [pc, #384]	; (8000e54 <main+0x308>)
 8000cd2:	f7ff fe9e 	bl	8000a12 <lcd_send_string>

  lcd_put_cur(1, 4);
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fe3e 	bl	800095a <lcd_put_cur>
  lcd_send_string("to start");
 8000cde:	485e      	ldr	r0, [pc, #376]	; (8000e58 <main+0x30c>)
 8000ce0:	f7ff fe97 	bl	8000a12 <lcd_send_string>

  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000ce4:	e002      	b.n	8000cec <main+0x1a0>
	  HAL_Delay(100);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f001 f83a 	bl	8001d60 <HAL_Delay>
  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3)){
 8000cec:	2108      	movs	r1, #8
 8000cee:	485b      	ldr	r0, [pc, #364]	; (8000e5c <main+0x310>)
 8000cf0:	f002 faaa 	bl	8003248 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f5      	bne.n	8000ce6 <main+0x19a>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8000cfa:	4859      	ldr	r0, [pc, #356]	; (8000e60 <main+0x314>)
 8000cfc:	f003 ff34 	bl	8004b68 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d00:	2108      	movs	r1, #8
 8000d02:	4858      	ldr	r0, [pc, #352]	; (8000e64 <main+0x318>)
 8000d04:	f003 fffa 	bl	8004cfc <HAL_TIM_PWM_Start>

  StartSound();
 8000d08:	f000 fb8c 	bl	8001424 <StartSound>

  lcd_clear();
 8000d0c:	f7ff fe0e 	bl	800092c <lcd_clear>
  lcd_put_cur(0, 1);
 8000d10:	2101      	movs	r1, #1
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe21 	bl	800095a <lcd_put_cur>
  lcd_send_string("LEVEL 1");
 8000d18:	4853      	ldr	r0, [pc, #332]	; (8000e68 <main+0x31c>)
 8000d1a:	f7ff fe7a 	bl	8000a12 <lcd_send_string>
  HAL_Delay(500);
 8000d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d22:	f001 f81d 	bl	8001d60 <HAL_Delay>

  lcd_put_cur(0, 9);
 8000d26:	2109      	movs	r1, #9
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fe16 	bl	800095a <lcd_put_cur>
  lcd_send_string("start!");
 8000d2e:	484f      	ldr	r0, [pc, #316]	; (8000e6c <main+0x320>)
 8000d30:	f7ff fe6f 	bl	8000a12 <lcd_send_string>
  HAL_Delay(800);
 8000d34:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d38:	f001 f812 	bl	8001d60 <HAL_Delay>

  // init _Character
  _Character pacman;
  memset(&pacman, 0, sizeof(pacman));
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2290      	movs	r2, #144	; 0x90
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 f9f5 	bl	8006134 <memset>
  pacman.prey=31;
 8000d4a:	231f      	movs	r3, #31
 8000d4c:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
  _Enemy octopus;

  // init _Enemy
  memset(&pacman, 0, sizeof(octopus));
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2210      	movs	r2, #16
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f005 f9eb 	bl	8006134 <memset>
  octopus.image_num=4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	60fb      	str	r3, [r7, #12]
  octopus.row=1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
  octopus.col=8;
 8000d66:	2308      	movs	r3, #8
 8000d68:	60bb      	str	r3, [r7, #8]

  lcd_clear();
 8000d6a:	f7ff fddf 	bl	800092c <lcd_clear>
  lcd_put_cur(pacman.row, pacman.col);
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fdf0 	bl	800095a <lcd_put_cur>
  lcd_send_data(pacman.image_num);
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fda4 	bl	80008cc <lcd_send_data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(game_status==ING){
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <main+0x324>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d135      	bne.n	8000df8 <main+0x2ac>
		  MoveCharacter(&pacman, readJoystick());
 8000d8c:	f000 f8ee 	bl	8000f6c <readJoystick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f90c 	bl	8000fb8 <MoveCharacter>
		  DisplayLCD(&pacman);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f97f 	bl	80010a8 <DisplayLCD>
		  MoveEnemy(&octopus, pacman, ClockFlag);
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <main+0x328>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	1d3c      	adds	r4, r7, #4
 8000db0:	9321      	str	r3, [sp, #132]	; 0x84
 8000db2:	4668      	mov	r0, sp
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	2284      	movs	r2, #132	; 0x84
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f005 f9ac 	bl	8006118 <memcpy>
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 f9c0 	bl	800114c <MoveEnemy>
		  DisplayEnemy(octopus);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd0:	f000 fa13 	bl	80011fa <DisplayEnemy>

		  game_status=GameCHK(&pacman, &octopus);
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fa21 	bl	8001224 <GameCHK>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <main+0x324>)
 8000de8:	701a      	strb	r2, [r3, #0]

		  HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	; 0x64
 8000dec:	f000 ffb8 	bl	8001d60 <HAL_Delay>
		  TIM3->CCR3 = 0;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <main+0x32c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df6:	e7c5      	b.n	8000d84 <main+0x238>

	  }else if(game_status==WIN){
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <main+0x324>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10e      	bne.n	8000e1e <main+0x2d2>
		  lcd_put_cur(0,4);
 8000e00:	2104      	movs	r1, #4
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fda9 	bl	800095a <lcd_put_cur>
		  lcd_send_string("YOU WIN");
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <main+0x330>)
 8000e0a:	f7ff fe02 	bl	8000a12 <lcd_send_string>
		  lcd_put_cur(1,0);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fda2 	bl	800095a <lcd_put_cur>
		  lcd_send_string("Congratulations!");
 8000e16:	481a      	ldr	r0, [pc, #104]	; (8000e80 <main+0x334>)
 8000e18:	f7ff fdfb 	bl	8000a12 <lcd_send_string>
 8000e1c:	e7b2      	b.n	8000d84 <main+0x238>
	  }else if(game_status==OVER){
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <main+0x324>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d1ae      	bne.n	8000d84 <main+0x238>
		  lcd_put_cur(0,4);
 8000e26:	2104      	movs	r1, #4
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fd96 	bl	800095a <lcd_put_cur>
		  lcd_send_string("YOU LOSE");
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <main+0x338>)
 8000e30:	f7ff fdef 	bl	8000a12 <lcd_send_string>
	  if(game_status==ING){
 8000e34:	e7a6      	b.n	8000d84 <main+0x238>
 8000e36:	bf00      	nop
 8000e38:	20000190 	.word	0x20000190
 8000e3c:	20000090 	.word	0x20000090
 8000e40:	08007224 	.word	0x08007224
 8000e44:	0800722c 	.word	0x0800722c
 8000e48:	08007234 	.word	0x08007234
 8000e4c:	0800723c 	.word	0x0800723c
 8000e50:	08007244 	.word	0x08007244
 8000e54:	080071cc 	.word	0x080071cc
 8000e58:	080071e0 	.word	0x080071e0
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	200001c0 	.word	0x200001c0
 8000e64:	20000208 	.word	0x20000208
 8000e68:	080071ec 	.word	0x080071ec
 8000e6c:	080071f4 	.word	0x080071f4
 8000e70:	2000018c 	.word	0x2000018c
 8000e74:	20000198 	.word	0x20000198
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	080071fc 	.word	0x080071fc
 8000e80:	08007204 	.word	0x08007204
 8000e84:	08007218 	.word	0x08007218

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	; 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 f94c 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <SystemClock_Config+0xdc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a2b      	ldr	r2, [pc, #172]	; (8000f64 <SystemClock_Config+0xdc>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <SystemClock_Config+0xdc>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <SystemClock_Config+0xe0>)
 8000ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <SystemClock_Config+0xe0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f00:	23b4      	movs	r3, #180	; 0xb4
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fec7 	bl	8003ca4 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f1c:	f000 fb44 	bl	80015a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f20:	f002 fe70 	bl	8003c04 <HAL_PWREx_EnableOverDrive>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f2a:	f000 fb3d 	bl	80015a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2105      	movs	r1, #5
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f921 	bl	8004194 <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f58:	f000 fb26 	bl	80015a8 <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3750      	adds	r7, #80	; 0x50
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <readJoystick>:

/* USER CODE BEGIN 4 */

_Direction readJoystick(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	  if(XY[0]>4080){
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <readJoystick+0x48>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000f78:	d901      	bls.n	8000f7e <readJoystick+0x12>
		  return RIGHT;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e014      	b.n	8000fa8 <readJoystick+0x3c>
	  }else if(XY[0]<20){
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <readJoystick+0x48>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b13      	cmp	r3, #19
 8000f84:	d801      	bhi.n	8000f8a <readJoystick+0x1e>
		  return LEFT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e00e      	b.n	8000fa8 <readJoystick+0x3c>
	  }else if(XY[1]<50){
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <readJoystick+0x48>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b31      	cmp	r3, #49	; 0x31
 8000f90:	d801      	bhi.n	8000f96 <readJoystick+0x2a>
		  return UP;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e008      	b.n	8000fa8 <readJoystick+0x3c>
	  }else if(XY[1]>4050){
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <readJoystick+0x48>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f640 72d2 	movw	r2, #4050	; 0xfd2
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <readJoystick+0x3a>
		  return DOWN;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <readJoystick+0x3c>
	  }else
		  return NONE;
 8000fa6:	2304      	movs	r3, #4
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000190 	.word	0x20000190

08000fb8 <MoveCharacter>:

void MoveCharacter(_Character *character, _Direction direction){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]

	switch(direction){
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d856      	bhi.n	8001078 <MoveCharacter+0xc0>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <MoveCharacter+0x18>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	08001045 	.word	0x08001045
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	08000fe1 	.word	0x08000fe1
 8000fdc:	08001013 	.word	0x08001013
	case RIGHT:
		character->col++;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
		if(character->col > 15) character->col = 15;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	dd02      	ble.n	8000ff8 <MoveCharacter+0x40>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	605a      	str	r2, [r3, #4]
		character->image_num &= ~(0x2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 0202 	bic.w	r2, r3, #2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
		character->image_num ^= 1;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f083 0201 	eor.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
		break;
 8001010:	e037      	b.n	8001082 <MoveCharacter+0xca>
	case LEFT:
		character->col--;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	605a      	str	r2, [r3, #4]
		if(character->col < 0) character->col = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	da02      	bge.n	800102a <MoveCharacter+0x72>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
		character->image_num |= 0x2;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f043 0202 	orr.w	r2, r3, #2
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
		character->image_num ^= 1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f083 0201 	eor.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	609a      	str	r2, [r3, #8]
		break;
 8001042:	e01e      	b.n	8001082 <MoveCharacter+0xca>
	case UP:
		character->row--;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
		if(character->row < 0) character->row = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da12      	bge.n	800107c <MoveCharacter+0xc4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		break;
 800105c:	e00e      	b.n	800107c <MoveCharacter+0xc4>
	case DOWN:
		character->row++;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
		if(character->row > 1) character->row = 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	dd07      	ble.n	8001080 <MoveCharacter+0xc8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
		break;
 8001076:	e003      	b.n	8001080 <MoveCharacter+0xc8>
	default :
		break;
 8001078:	bf00      	nop
 800107a:	e002      	b.n	8001082 <MoveCharacter+0xca>
		break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <MoveCharacter+0xca>
		break;
 8001080:	bf00      	nop
	}
	character->past_position[character->row][character->col]=1;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	0109      	lsls	r1, r1, #4
 800108e:	440b      	add	r3, r1
 8001090:	3302      	adds	r3, #2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	605a      	str	r2, [r3, #4]

}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <DisplayLCD>:

void DisplayLCD(_Character *character){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	uint8_t chk=0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
	lcd_clear();
 80010b4:	f7ff fc3a 	bl	800092c <lcd_clear>
	lcd_put_cur(character->row, character->col);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f7ff fc49 	bl	800095a <lcd_put_cur>
	lcd_send_data(character->image_num);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fbfc 	bl	80008cc <lcd_send_data>
	for(int i=0;i<=1;i++){
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	e020      	b.n	800111c <DisplayLCD+0x74>
		for(int j=0;j<16;j++){
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e017      	b.n	8001110 <DisplayLCD+0x68>
			if(character->past_position[i][j]!=1){
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	0119      	lsls	r1, r3, #4
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	440b      	add	r3, r1
 80010ea:	3302      	adds	r3, #2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d009      	beq.n	800110a <DisplayLCD+0x62>
				lcd_put_cur(i,j);
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	6938      	ldr	r0, [r7, #16]
 80010fa:	f7ff fc2e 	bl	800095a <lcd_put_cur>
				lcd_send_data(0xa5);
 80010fe:	20a5      	movs	r0, #165	; 0xa5
 8001100:	f7ff fbe4 	bl	80008cc <lcd_send_data>
				chk++;
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	3301      	adds	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
		for(int j=0;j<16;j++){
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	dde4      	ble.n	80010e0 <DisplayLCD+0x38>
	for(int i=0;i<=1;i++){
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b01      	cmp	r3, #1
 8001120:	dddb      	ble.n	80010da <DisplayLCD+0x32>
			}
		}
	}
	if(chk < character->prey){
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001128:	7dfa      	ldrb	r2, [r7, #23]
 800112a:	429a      	cmp	r2, r3
 800112c:	d208      	bcs.n	8001140 <DisplayLCD+0x98>
		TIM3->CCR3 = TIM3->ARR /2;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <DisplayLCD+0xa0>)
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <DisplayLCD+0xa0>)
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	63d3      	str	r3, [r2, #60]	; 0x3c
		character->prey=chk;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7dfa      	ldrb	r2, [r7, #23]
 800113c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	}
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40000400 	.word	0x40000400

0800114c <MoveEnemy>:

void MoveEnemy(_Enemy *enemy, _Character character, uint8_t pulse){
 800114c:	b084      	sub	sp, #16
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	f107 001c 	add.w	r0, r7, #28
 800115a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t move = rand()%2;
 800115e:	f004 fff1 	bl	8006144 <rand>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	bfb8      	it	lt
 800116c:	425b      	neglt	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]

	if(pulse==1 && enemy->clock_before==0){
 8001170:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001174:	2b01      	cmp	r3, #1
 8001176:	d135      	bne.n	80011e4 <MoveEnemy+0x98>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d131      	bne.n	80011e4 <MoveEnemy+0x98>
		if(move==0){
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d108      	bne.n	8001198 <MoveEnemy+0x4c>
			if(enemy->row!=character.row) enemy->row=character.row;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	d029      	beq.n	80011e4 <MoveEnemy+0x98>
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e025      	b.n	80011e4 <MoveEnemy+0x98>
		}else if(move==1) {
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d122      	bne.n	80011e4 <MoveEnemy+0x98>
			if(enemy->col > character.col){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dd0c      	ble.n	80011c2 <MoveEnemy+0x76>
				enemy->col--;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
				if(enemy->col<0) enemy->col=0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da14      	bge.n	80011e4 <MoveEnemy+0x98>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	e010      	b.n	80011e4 <MoveEnemy+0x98>
			}else if(enemy->col < character.col){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	da0b      	bge.n	80011e4 <MoveEnemy+0x98>
				enemy->col++;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
				if(enemy->col>15) enemy->col=15;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	dd02      	ble.n	80011e4 <MoveEnemy+0x98>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	220f      	movs	r2, #15
 80011e2:	605a      	str	r2, [r3, #4]
			}
		}
	}

	enemy->clock_before=pulse;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80011ea:	731a      	strb	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f6:	b004      	add	sp, #16
 80011f8:	4770      	bx	lr

080011fa <DisplayEnemy>:

void DisplayEnemy(_Enemy enemy){
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	463c      	mov	r4, r7
 8001202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_put_cur(enemy.row, enemy.col);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fba4 	bl	800095a <lcd_put_cur>
	lcd_send_data(enemy.image_num);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb58 	bl	80008cc <lcd_send_data>
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <GameCHK>:

_Game_status GameCHK(_Character *character, _Enemy *enemy){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	uint8_t chk=0;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
	for(int i=0;i<=1;i++){
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	e019      	b.n	800126c <GameCHK+0x48>
		for(int j=0;j<16;j++){
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e010      	b.n	8001260 <GameCHK+0x3c>
			if(character->past_position[i][j]==1) chk++;
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	0119      	lsls	r1, r3, #4
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	440b      	add	r3, r1
 8001248:	3302      	adds	r3, #2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d102      	bne.n	800125a <GameCHK+0x36>
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	3301      	adds	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
		for(int j=0;j<16;j++){
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	ddeb      	ble.n	800123e <GameCHK+0x1a>
	for(int i=0;i<=1;i++){
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	3301      	adds	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	dde2      	ble.n	8001238 <GameCHK+0x14>
		}
	}
	if(character->row==enemy->row && character->col==enemy->col){
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d109      	bne.n	8001292 <GameCHK+0x6e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d103      	bne.n	8001292 <GameCHK+0x6e>
		LoseSound();
 800128a:	f000 f8ef 	bl	800146c <LoseSound>
		return OVER;
 800128e:	2302      	movs	r3, #2
 8001290:	e066      	b.n	8001360 <GameCHK+0x13c>
	}
	else if(chk==32 && level==1){
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	2b20      	cmp	r3, #32
 8001296:	d129      	bne.n	80012ec <GameCHK+0xc8>
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <GameCHK+0x144>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d125      	bne.n	80012ec <GameCHK+0xc8>
		WinSound();
 80012a0:	f000 f91a 	bl	80014d8 <WinSound>
		lcd_clear();
 80012a4:	f7ff fb42 	bl	800092c <lcd_clear>
		lcd_put_cur(0, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fb55 	bl	800095a <lcd_put_cur>
		lcd_send_string("LEVEL 2");
 80012b0:	482e      	ldr	r0, [pc, #184]	; (800136c <GameCHK+0x148>)
 80012b2:	f7ff fbae 	bl	8000a12 <lcd_send_string>
		HAL_Delay(500);
 80012b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ba:	f000 fd51 	bl	8001d60 <HAL_Delay>
		lcd_put_cur(0, 9);
 80012be:	2109      	movs	r1, #9
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fb4a 	bl	800095a <lcd_put_cur>
		lcd_send_string("start!");
 80012c6:	482a      	ldr	r0, [pc, #168]	; (8001370 <GameCHK+0x14c>)
 80012c8:	f7ff fba3 	bl	8000a12 <lcd_send_string>
		HAL_Delay(800);
 80012cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80012d0:	f000 fd46 	bl	8001d60 <HAL_Delay>
		LevelupInit(character, enemy);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f850 	bl	800137c <LevelupInit>
		TIM2->PSC = 6750;
 80012dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e0:	f641 225e 	movw	r2, #6750	; 0x1a5e
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
		return game_status;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <GameCHK+0x150>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	e039      	b.n	8001360 <GameCHK+0x13c>
	}else if(chk==32 && level==2){
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b20      	cmp	r3, #32
 80012f0:	d129      	bne.n	8001346 <GameCHK+0x122>
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <GameCHK+0x144>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d125      	bne.n	8001346 <GameCHK+0x122>
		WinSound();
 80012fa:	f000 f8ed 	bl	80014d8 <WinSound>
		lcd_clear();
 80012fe:	f7ff fb15 	bl	800092c <lcd_clear>
		lcd_put_cur(0, 1);
 8001302:	2101      	movs	r1, #1
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fb28 	bl	800095a <lcd_put_cur>
		lcd_send_string("LEVEL 3");
 800130a:	481b      	ldr	r0, [pc, #108]	; (8001378 <GameCHK+0x154>)
 800130c:	f7ff fb81 	bl	8000a12 <lcd_send_string>
		HAL_Delay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f000 fd24 	bl	8001d60 <HAL_Delay>
		lcd_put_cur(0, 9);
 8001318:	2109      	movs	r1, #9
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fb1d 	bl	800095a <lcd_put_cur>
		lcd_send_string("start!");
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <GameCHK+0x14c>)
 8001322:	f7ff fb76 	bl	8000a12 <lcd_send_string>
		HAL_Delay(800);
 8001326:	f44f 7048 	mov.w	r0, #800	; 0x320
 800132a:	f000 fd19 	bl	8001d60 <HAL_Delay>
		LevelupInit(character, enemy);
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f823 	bl	800137c <LevelupInit>
		TIM2->PSC = 4500;
 8001336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133a:	f241 1294 	movw	r2, #4500	; 0x1194
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
		return game_status;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <GameCHK+0x150>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	e00c      	b.n	8001360 <GameCHK+0x13c>
	}else if(chk==32 && level==3){
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b20      	cmp	r3, #32
 800134a:	d107      	bne.n	800135c <GameCHK+0x138>
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <GameCHK+0x144>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d103      	bne.n	800135c <GameCHK+0x138>
		WinSound();
 8001354:	f000 f8c0 	bl	80014d8 <WinSound>
		return WIN;
 8001358:	2301      	movs	r3, #1
 800135a:	e001      	b.n	8001360 <GameCHK+0x13c>
	}
	else return game_status;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <GameCHK+0x150>)
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	0800724c 	.word	0x0800724c
 8001370:	080071f4 	.word	0x080071f4
 8001374:	2000018c 	.word	0x2000018c
 8001378:	08007254 	.word	0x08007254

0800137c <LevelupInit>:

void LevelupInit(_Character *character, _Enemy *enemy){
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	level++;
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <LevelupInit+0x7c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <LevelupInit+0x7c>)
 8001390:	701a      	strb	r2, [r3, #0]
	character->row=0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
	character->col=0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
	character->prey=31;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	221f      	movs	r2, #31
 80013a2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	for(int i=0;i<=1;i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e015      	b.n	80013d8 <LevelupInit+0x5c>
		for(int j=0;j<16;j++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	e00c      	b.n	80013cc <LevelupInit+0x50>
			character->past_position[i][j]=0;
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	0119      	lsls	r1, r3, #4
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	440b      	add	r3, r1
 80013bc:	3302      	adds	r3, #2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
		for(int j=0;j<16;j++){
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	ddef      	ble.n	80013b2 <LevelupInit+0x36>
	for(int i=0;i<=1;i++){
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	dde6      	ble.n	80013ac <LevelupInit+0x30>
		}
	}
	enemy->row=1;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
	enemy->col=8;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	605a      	str	r2, [r3, #4]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000

080013fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	ClockFlag ^= 0x01;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f083 0301 	eor.w	r3, r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000198 	.word	0x20000198

08001424 <StartSound>:

void StartSound(){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	TIM3->ARR = 156;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <StartSound+0x44>)
 800142a:	229c      	movs	r2, #156	; 0x9c
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <StartSound+0x44>)
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <StartSound+0x44>)
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f000 fc91 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 111;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <StartSound+0x44>)
 8001440:	226f      	movs	r2, #111	; 0x6f
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <StartSound+0x44>)
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <StartSound+0x44>)
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 800144e:	2064      	movs	r0, #100	; 0x64
 8001450:	f000 fc86 	bl	8001d60 <HAL_Delay>
	// setting for prey eating sound
	TIM3->ARR = 1060;
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <StartSound+0x44>)
 8001456:	f240 4224 	movw	r2, #1060	; 0x424
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = 0;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <StartSound+0x44>)
 800145e:	2200      	movs	r2, #0
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40000400 	.word	0x40000400

0800146c <LoseSound>:

void LoseSound(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	TIM3->ARR = 290;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <LoseSound+0x68>)
 8001472:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <LoseSound+0x68>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <LoseSound+0x68>)
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(80);
 8001482:	2050      	movs	r0, #80	; 0x50
 8001484:	f000 fc6c 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 391;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <LoseSound+0x68>)
 800148a:	f240 1287 	movw	r2, #391	; 0x187
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <LoseSound+0x68>)
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <LoseSound+0x68>)
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(80);
 800149a:	2050      	movs	r0, #80	; 0x50
 800149c:	f000 fc60 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 290;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LoseSound+0x68>)
 80014a2:	f44f 7291 	mov.w	r2, #290	; 0x122
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <LoseSound+0x68>)
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <LoseSound+0x68>)
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(80);
 80014b2:	2050      	movs	r0, #80	; 0x50
 80014b4:	f000 fc54 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 391;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <LoseSound+0x68>)
 80014ba:	f240 1287 	movw	r2, #391	; 0x187
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <LoseSound+0x68>)
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <LoseSound+0x68>)
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(80);
 80014ca:	2050      	movs	r0, #80	; 0x50
 80014cc:	f000 fc48 	bl	8001d60 <HAL_Delay>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40000400 	.word	0x40000400

080014d8 <WinSound>:

void WinSound(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	TIM3->ARR = 593;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <WinSound+0xcc>)
 80014de:	f240 2251 	movw	r2, #593	; 0x251
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <WinSound+0xcc>)
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <WinSound+0xcc>)
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 80014ee:	2064      	movs	r0, #100	; 0x64
 80014f0:	f000 fc36 	bl	8001d60 <HAL_Delay>
	TIM3->CCR3 = 0;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <WinSound+0xcc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f000 fc30 	bl	8001d60 <HAL_Delay>
	TIM3->CCR3 = TIM3->ARR / 2;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <WinSound+0xcc>)
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <WinSound+0xcc>)
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 800150a:	2064      	movs	r0, #100	; 0x64
 800150c:	f000 fc28 	bl	8001d60 <HAL_Delay>
	TIM3->CCR3 = 0;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <WinSound+0xcc>)
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(10);
 8001516:	200a      	movs	r0, #10
 8001518:	f000 fc22 	bl	8001d60 <HAL_Delay>
	TIM3->CCR3 = TIM3->ARR / 2;
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <WinSound+0xcc>)
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <WinSound+0xcc>)
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 8001526:	2064      	movs	r0, #100	; 0x64
 8001528:	f000 fc1a 	bl	8001d60 <HAL_Delay>
	TIM3->CCR3 = 0;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <WinSound+0xcc>)
 800152e:	2200      	movs	r2, #0
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(10);
 8001532:	200a      	movs	r0, #10
 8001534:	f000 fc14 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 767;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <WinSound+0xcc>)
 800153a:	f240 22ff 	movw	r2, #767	; 0x2ff
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <WinSound+0xcc>)
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <WinSound+0xcc>)
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f000 fc08 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 593;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <WinSound+0xcc>)
 8001552:	f240 2251 	movw	r2, #593	; 0x251
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <WinSound+0xcc>)
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <WinSound+0xcc>)
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 8001562:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001566:	f000 fbfb 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 508;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <WinSound+0xcc>)
 800156c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <WinSound+0xcc>)
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <WinSound+0xcc>)
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 800157c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001580:	f000 fbee 	bl	8001d60 <HAL_Delay>
	TIM3->ARR = 1029;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <WinSound+0xcc>)
 8001586:	f240 4205 	movw	r2, #1029	; 0x405
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR3 = TIM3->ARR / 2;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <WinSound+0xcc>)
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <WinSound+0xcc>)
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_Delay(300);
 8001596:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800159a:	f000 fbe1 	bl	8001d60 <HAL_Delay>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40000400 	.word	0x40000400

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_RTC_Init+0x44>)
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <MX_RTC_Init+0x48>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_RTC_Init+0x44>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_RTC_Init+0x44>)
 80015c6:	227f      	movs	r2, #127	; 0x7f
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_RTC_Init+0x44>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_RTC_Init+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_RTC_Init+0x44>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_RTC_Init+0x44>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_RTC_Init+0x44>)
 80015e4:	f003 f976 	bl	80048d4 <HAL_RTC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80015ee:	f7ff ffdb 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000019c 	.word	0x2000019c
 80015fc:	40002800 	.word	0x40002800

08001600 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	2230      	movs	r2, #48	; 0x30
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f004 fd8f 	bl	8006134 <memset>
  if(rtcHandle->Instance==RTC)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_RTC_MspInit+0x4c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001620:	2320      	movs	r3, #32
 8001622:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4618      	mov	r0, r3
 8001630:	f002 ff90 	bl	8004554 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800163a:	f7ff ffb5 	bl	80015a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RTC_MspInit+0x50>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001644:	bf00      	nop
 8001646:	3738      	adds	r7, #56	; 0x38
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40002800 	.word	0x40002800
 8001650:	42470e3c 	.word	0x42470e3c

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_MspInit+0x4c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_MspInit+0x4c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x4c>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x4c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 fb16 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM2_IRQHandler+0x10>)
 80016fe:	f003 fbc5 	bl	8004e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001c0 	.word	0x200001c0

0800170c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA2_Stream0_IRQHandler+0x10>)
 8001712:	f001 f983 	bl	8002a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000d8 	.word	0x200000d8

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173a:	f004 fcc3 	bl	80060c4 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f004 fc28 	bl	80060c4 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20030000 	.word	0x20030000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	200001bc 	.word	0x200001bc
 80018a8:	200002a8 	.word	0x200002a8

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <MX_TIM2_Init+0x98>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_TIM2_Init+0x98>)
 80018f6:	f242 3227 	movw	r2, #8999	; 0x2327
 80018fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM2_Init+0x98>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM2_Init+0x98>)
 8001904:	f242 720f 	movw	r2, #9999	; 0x270f
 8001908:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_TIM2_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM2_Init+0x98>)
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_TIM2_Init+0x98>)
 8001918:	f003 f8d6 	bl	8004ac8 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001922:	f7ff fe41 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0308 	add.w	r3, r7, #8
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM2_Init+0x98>)
 8001934:	f003 fc74 	bl	8005220 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800193e:	f7ff fe33 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM2_Init+0x98>)
 8001950:	f004 f866 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800195a:	f7ff fe25 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200001c0 	.word	0x200001c0

0800196c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	; 0x38
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]
 800199a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800199c:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <MX_TIM3_Init+0xe4>)
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <MX_TIM3_Init+0xe8>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 230-1;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019a4:	22e5      	movs	r2, #229	; 0xe5
 80019a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019c2:	4823      	ldr	r0, [pc, #140]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019c4:	f003 f880 	bl	8004ac8 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ce:	f7ff fdeb 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019dc:	4619      	mov	r1, r3
 80019de:	481c      	ldr	r0, [pc, #112]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019e0:	f003 fc1e 	bl	8005220 <HAL_TIM_ConfigClockSource>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019ea:	f7ff fddd 	bl	80015a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ee:	4818      	ldr	r0, [pc, #96]	; (8001a50 <MX_TIM3_Init+0xe4>)
 80019f0:	f003 f92a 	bl	8004c48 <HAL_TIM_PWM_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019fa:	f7ff fdd5 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4810      	ldr	r0, [pc, #64]	; (8001a50 <MX_TIM3_Init+0xe4>)
 8001a0e:	f004 f807 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a18:	f7ff fdc6 	bl	80015a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a1c:	2360      	movs	r3, #96	; 0x60
 8001a1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2208      	movs	r2, #8
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM3_Init+0xe4>)
 8001a34:	f003 fb32 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a3e:	f7ff fdb3 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM3_Init+0xe4>)
 8001a44:	f000 f844 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3738      	adds	r7, #56	; 0x38
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000208 	.word	0x20000208
 8001a54:	40000400 	.word	0x40000400

08001a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d116      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f000 fe89 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a90:	201c      	movs	r0, #28
 8001a92:	f000 fea2 	bl	80027da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a96:	e012      	b.n	8001abe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <HAL_TIM_Base_MspInit+0x74>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10d      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_TIM_Base_MspInit+0x70>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40000400 	.word	0x40000400

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11d      	bne.n	8001b2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001b2a:	f001 f9e1 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400

08001b44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART3_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	f003 ffe0 	bl	8005b40 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f7ff fd0f 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000250 	.word	0x20000250
 8001b94:	40004800 	.word	0x40004800

08001b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <HAL_UART_MspInit+0x84>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12c      	bne.n	8001c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_UART_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c04:	2307      	movs	r3, #7
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_UART_MspInit+0x8c>)
 8001c10:	f001 f96e 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40004800 	.word	0x40004800
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020c00 	.word	0x40020c00

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c2e:	490e      	ldr	r1, [pc, #56]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c30:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c44:	4c0b      	ldr	r4, [pc, #44]	; (8001c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c52:	f7ff fe2b 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f004 fa3b 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7fe ff77 	bl	8000b4c <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c6c:	080073d4 	.word	0x080073d4
  ldr r2, =_sbss
 8001c70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c74:	200002a8 	.word	0x200002a8

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_Init+0x40>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_Init+0x40>)
 8001c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_Init+0x40>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 fd71 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fcd0 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd89 	bl	80027f6 <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 fd51 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000004 	.word	0x20000004
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000294 	.word	0x20000294

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000294 	.word	0x20000294

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e033      	b.n	8001e26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fc44 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dee:	f023 0302 	bic.w	r3, r3, #2
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fa78 	bl	80022f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
 8001e16:	e001      	b.n	8001e1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Start_DMA+0x1e>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0e9      	b.n	8002022 <HAL_ADC_Start_DMA+0x1f2>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d018      	beq.n	8001e96 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_ADC_Start_DMA+0x1fc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <HAL_ADC_Start_DMA+0x200>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9a      	lsrs	r2, r3, #18
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e88:	e002      	b.n	8001e90 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d107      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 80a1 	bne.w	8002008 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f04:	d106      	bne.n	8001f14 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f023 0206 	bic.w	r2, r3, #6
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
 8001f12:	e002      	b.n	8001f1a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f22:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_ADC_Start_DMA+0x204>)
 8001f24:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4a43      	ldr	r2, [pc, #268]	; (8002038 <HAL_ADC_Start_DMA+0x208>)
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	4a42      	ldr	r2, [pc, #264]	; (800203c <HAL_ADC_Start_DMA+0x20c>)
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	4a41      	ldr	r2, [pc, #260]	; (8002040 <HAL_ADC_Start_DMA+0x210>)
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f46:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f56:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f66:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	334c      	adds	r3, #76	; 0x4c
 8001f72:	4619      	mov	r1, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f000 fcf8 	bl	800296c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d12a      	bne.n	8001fde <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_ADC_Start_DMA+0x214>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d015      	beq.n	8001fbe <HAL_ADC_Start_DMA+0x18e>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <HAL_ADC_Start_DMA+0x218>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x178>
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_ADC_Start_DMA+0x204>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_ADC_Start_DMA+0x21c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d136      	bne.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_ADC_Start_DMA+0x204>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d130      	bne.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d129      	bne.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e020      	b.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_ADC_Start_DMA+0x214>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d11b      	bne.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d114      	bne.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e00b      	b.n	8002020 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0210 	orr.w	r2, r3, #16
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000004 	.word	0x20000004
 8002030:	431bde83 	.word	0x431bde83
 8002034:	40012300 	.word	0x40012300
 8002038:	080024e9 	.word	0x080024e9
 800203c:	080025a3 	.word	0x080025a3
 8002040:	080025bf 	.word	0x080025bf
 8002044:	40012000 	.word	0x40012000
 8002048:	40012100 	.word	0x40012100
 800204c:	40012200 	.word	0x40012200

08002050 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e113      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x244>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d925      	bls.n	8002104 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68d9      	ldr	r1, [r3, #12]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	2207      	movs	r2, #7
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43da      	mvns	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	400a      	ands	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4403      	add	r3, r0
 80020f6:	3b1e      	subs	r3, #30
 80020f8:	409a      	lsls	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	e022      	b.n	800214a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	2207      	movs	r2, #7
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	4603      	mov	r3, r0
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4403      	add	r3, r0
 8002140:	409a      	lsls	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d824      	bhi.n	800219c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b05      	subs	r3, #5
 8002164:	221f      	movs	r2, #31
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b05      	subs	r3, #5
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34
 800219a:	e04c      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d824      	bhi.n	80021ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b23      	subs	r3, #35	; 0x23
 80021b6:	221f      	movs	r2, #31
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	3b23      	subs	r3, #35	; 0x23
 80021e0:	fa00 f203 	lsl.w	r2, r0, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
 80021ec:	e023      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b41      	subs	r3, #65	; 0x41
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b41      	subs	r3, #65	; 0x41
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_ADC_ConfigChannel+0x250>)
 8002238:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_ADC_ConfigChannel+0x254>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d10f      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1d8>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b12      	cmp	r3, #18
 800224a:	d10b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_ADC_ConfigChannel+0x254>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12b      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x23a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_ADC_ConfigChannel+0x258>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x1f4>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b11      	cmp	r3, #17
 800227e:	d122      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_ADC_ConfigChannel+0x258>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d111      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_ADC_ConfigChannel+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_ADC_ConfigChannel+0x260>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	0c9a      	lsrs	r2, r3, #18
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b8:	e002      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f9      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40012300 	.word	0x40012300
 80022e0:	40012000 	.word	0x40012000
 80022e4:	10000012 	.word	0x10000012
 80022e8:	20000004 	.word	0x20000004
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f8:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <ADC_Init+0x1f0>)
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <ADC_Init+0x1f4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e00f      	b.n	80023ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0202 	bic.w	r2, r2, #2
 80023fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	005a      	lsls	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800243a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	035a      	lsls	r2, r3, #13
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e007      	b.n	8002464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	3b01      	subs	r3, #1
 8002480:	051a      	lsls	r2, r3, #20
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a6:	025a      	lsls	r2, r3, #9
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	029a      	lsls	r2, r3, #10
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	0f000001 	.word	0x0f000001

080024e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d13c      	bne.n	800257c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d12b      	bne.n	8002574 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	d127      	bne.n	8002574 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800253c:	2b00      	cmp	r3, #0
 800253e:	d119      	bne.n	8002574 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0220 	bic.w	r2, r2, #32
 800254e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff fd6b 	bl	8002050 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800257a:	e00e      	b.n	800259a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff fd75 	bl	8002078 <HAL_ADC_ErrorCallback>
}
 800258e:	e004      	b.n	800259a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fd57 	bl	8002064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff fd4a 	bl	8002078 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff fa94 	bl	8001d48 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e099      	b.n	8002960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	e00f      	b.n	800286e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284e:	f7ff fa7b 	bl	8001d48 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b05      	cmp	r3, #5
 800285a:	d908      	bls.n	800286e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e078      	b.n	8002960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e8      	bne.n	800284e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_DMA_Init+0x158>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4313      	orrs	r3, r2
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d117      	bne.n	8002932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fa6f 	bl	8002df8 <DMA_CheckFifoParam>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800292e:	2301      	movs	r3, #1
 8002930:	e016      	b.n	8002960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa26 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 8002940:	4603      	mov	r3, r0
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f010803f 	.word	0xf010803f

0800296c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x26>
 800298e:	2302      	movs	r3, #2
 8002990:	e040      	b.n	8002a14 <HAL_DMA_Start_IT+0xa8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12f      	bne.n	8002a06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9b8 	bl	8002d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0216 	orr.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a28:	4b8e      	ldr	r3, [pc, #568]	; (8002c64 <HAL_DMA_IRQHandler+0x248>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a8e      	ldr	r2, [pc, #568]	; (8002c68 <HAL_DMA_IRQHandler+0x24c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03c      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2210      	movs	r2, #16
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2220      	movs	r2, #32
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808f 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8087 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d136      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x1da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	223f      	movs	r2, #63	; 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07e      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
        }
        return;
 8002c32:	e079      	b.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e02c      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
 8002c62:	bf00      	nop
 8002c64:	20000004 	.word	0x20000004
 8002c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e01e      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d032      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d307      	bcc.n	8002d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x2cc>
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d108      	bne.n	8002d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6e:	e007      	b.n	8002d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	08007274 	.word	0x08007274

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e177      	b.n	80031fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8166 	bne.w	80031f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80c0 	beq.w	80031f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b66      	ldr	r3, [pc, #408]	; (8003214 <HAL_GPIO_Init+0x324>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a65      	ldr	r2, [pc, #404]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a61      	ldr	r2, [pc, #388]	; (8003218 <HAL_GPIO_Init+0x328>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d037      	beq.n	800312e <HAL_GPIO_Init+0x23e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a57      	ldr	r2, [pc, #348]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d031      	beq.n	800312a <HAL_GPIO_Init+0x23a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a56      	ldr	r2, [pc, #344]	; (8003224 <HAL_GPIO_Init+0x334>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02b      	beq.n	8003126 <HAL_GPIO_Init+0x236>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a55      	ldr	r2, [pc, #340]	; (8003228 <HAL_GPIO_Init+0x338>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d025      	beq.n	8003122 <HAL_GPIO_Init+0x232>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a54      	ldr	r2, [pc, #336]	; (800322c <HAL_GPIO_Init+0x33c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <HAL_GPIO_Init+0x22e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a53      	ldr	r2, [pc, #332]	; (8003230 <HAL_GPIO_Init+0x340>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x22a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_GPIO_Init+0x344>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a51      	ldr	r2, [pc, #324]	; (8003238 <HAL_GPIO_Init+0x348>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a50      	ldr	r2, [pc, #320]	; (800323c <HAL_GPIO_Init+0x34c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4f      	ldr	r2, [pc, #316]	; (8003240 <HAL_GPIO_Init+0x350>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x21a>
 8003106:	2309      	movs	r3, #9
 8003108:	e012      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800310a:	230a      	movs	r3, #10
 800310c:	e010      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800310e:	2308      	movs	r3, #8
 8003110:	e00e      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003112:	2307      	movs	r3, #7
 8003114:	e00c      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003116:	2306      	movs	r3, #6
 8003118:	e00a      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800311a:	2305      	movs	r3, #5
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800311e:	2304      	movs	r3, #4
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4935      	ldr	r1, [pc, #212]	; (8003218 <HAL_GPIO_Init+0x328>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_GPIO_Init+0x354>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003172:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_GPIO_Init+0x354>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <HAL_GPIO_Init+0x354>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800319c:	4a29      	ldr	r2, [pc, #164]	; (8003244 <HAL_GPIO_Init+0x354>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_GPIO_Init+0x354>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_GPIO_Init+0x354>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_GPIO_Init+0x354>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_GPIO_Init+0x354>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f ae84 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	; 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40021400 	.word	0x40021400
 8003234:	40021800 	.word	0x40021800
 8003238:	40021c00 	.word	0x40021c00
 800323c:	40022000 	.word	0x40022000
 8003240:	40022400 	.word	0x40022400
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e12b      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fc0c 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032dc:	f001 f912 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a81      	ldr	r2, [pc, #516]	; (80034ec <HAL_I2C_Init+0x274>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <HAL_I2C_Init+0x84>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a80      	ldr	r2, [pc, #512]	; (80034f0 <HAL_I2C_Init+0x278>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e006      	b.n	800330a <HAL_I2C_Init+0x92>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a7d      	ldr	r2, [pc, #500]	; (80034f4 <HAL_I2C_Init+0x27c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0e7      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a78      	ldr	r2, [pc, #480]	; (80034f8 <HAL_I2C_Init+0x280>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a6a      	ldr	r2, [pc, #424]	; (80034ec <HAL_I2C_Init+0x274>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d802      	bhi.n	800334c <HAL_I2C_Init+0xd4>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	e009      	b.n	8003360 <HAL_I2C_Init+0xe8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	4a69      	ldr	r2, [pc, #420]	; (80034fc <HAL_I2C_Init+0x284>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003372:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	495c      	ldr	r1, [pc, #368]	; (80034ec <HAL_I2C_Init+0x274>)
 800337c:	428b      	cmp	r3, r1
 800337e:	d819      	bhi.n	80033b4 <HAL_I2C_Init+0x13c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e59      	subs	r1, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fbb1 f3f3 	udiv	r3, r1, r3
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003394:	400b      	ands	r3, r1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_I2C_Init+0x138>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e59      	subs	r1, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	e051      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b0:	2304      	movs	r3, #4
 80033b2:	e04f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_I2C_Init+0x168>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	440b      	add	r3, r1
 80033ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e012      	b.n	8003406 <HAL_I2C_Init+0x18e>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x196>
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_I2C_Init+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1e58      	subs	r0, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	440b      	add	r3, r1
 8003424:	fbb0 f3f3 	udiv	r3, r0, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	6809      	ldr	r1, [r1, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003482:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6911      	ldr	r1, [r2, #16]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	000186a0 	.word	0x000186a0
 80034f0:	001e847f 	.word	0x001e847f
 80034f4:	003d08ff 	.word	0x003d08ff
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7fe fc18 	bl	8001d48 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	f040 80e0 	bne.w	80036e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	4970      	ldr	r1, [pc, #448]	; (80036f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f964 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	e0d3      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Transmit+0x50>
 800354c:	2302      	movs	r3, #2
 800354e:	e0cc      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d007      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2210      	movs	r2, #16
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f89c 	bl	80036fc <I2C_MasterRequestWrite>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08d      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e4:	e066      	b.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f9de 	bl	80039ac <I2C_WaitOnTXEFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d107      	bne.n	800360e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06b      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d11b      	bne.n	8003688 <HAL_I2C_Master_Transmit+0x188>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6a39      	ldr	r1, [r7, #32]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f9ce 	bl	8003a2e <I2C_WaitOnBTFFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b04      	cmp	r3, #4
 800369e:	d107      	bne.n	80036b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01a      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d194      	bne.n	80035e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	00100002 	.word	0x00100002
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d006      	beq.n	8003726 <I2C_MasterRequestWrite+0x2a>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d003      	beq.n	8003726 <I2C_MasterRequestWrite+0x2a>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003724:	d108      	bne.n	8003738 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00b      	b.n	8003750 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b12      	cmp	r3, #18
 800373e:	d107      	bne.n	8003750 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f84f 	bl	8003800 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	d103      	bne.n	8003780 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e035      	b.n	80037f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378c:	d108      	bne.n	80037a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	e01b      	b.n	80037d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	11db      	asrs	r3, r3, #7
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 0306 	and.w	r3, r3, #6
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f063 030f 	orn	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <I2C_MasterRequestWrite+0xfc>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f875 	bl	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e010      	b.n	80037f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4907      	ldr	r1, [pc, #28]	; (80037fc <I2C_MasterRequestWrite+0x100>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f865 	bl	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00010008 	.word	0x00010008
 80037fc:	00010002 	.word	0x00010002

08003800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003810:	e025      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d021      	beq.n	800385e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fe fa95 	bl	8001d48 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e023      	b.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10d      	bne.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	e00c      	b.n	800389e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d0b6      	beq.n	8003812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038bc:	e051      	b.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d123      	bne.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e046      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d021      	beq.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fe fa13 	bl	8001d48 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d116      	bne.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e020      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10c      	bne.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e00b      	b.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	43da      	mvns	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d18d      	bne.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b8:	e02d      	b.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f878 	bl	8003ab0 <I2C_IsAcknowledgeFailed>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02d      	b.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d021      	beq.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe f9b9 	bl	8001d48 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d116      	bne.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d1ca      	bne.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3a:	e02d      	b.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f837 	bl	8003ab0 <I2C_IsAcknowledgeFailed>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e02d      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d021      	beq.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7fe f978 	bl	8001d48 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e007      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d1ca      	bne.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d11b      	bne.n	8003b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d129      	bne.n	8003b78 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0210 	bic.w	r2, r2, #16
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d12a      	bne.n	8003bf6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	f023 030f 	bic.w	r3, r3, #15
 8003bc6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	89fb      	ldrh	r3, [r7, #14]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	89fa      	ldrh	r2, [r7, #14]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7fe f88a 	bl	8001d48 <HAL_GetTick>
 8003c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c36:	e009      	b.n	8003c4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c38:	f7fe f886 	bl	8001d48 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c46:	d901      	bls.n	8003c4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e01f      	b.n	8003c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d1ee      	bne.n	8003c38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c60:	f7fe f872 	bl	8001d48 <HAL_GetTick>
 8003c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c66:	e009      	b.n	8003c7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c68:	f7fe f86e 	bl	8001d48 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c76:	d901      	bls.n	8003c7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e007      	b.n	8003c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c88:	d1ee      	bne.n	8003c68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	420e0040 	.word	0x420e0040
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	420e0044 	.word	0x420e0044

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e267      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d075      	beq.n	8003dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x108>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e242      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x74>
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a75      	ldr	r2, [pc, #468]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x98>
 8003d22:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6f      	ldr	r2, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6c      	ldr	r2, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	4b69      	ldr	r3, [pc, #420]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a68      	ldr	r2, [pc, #416]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fff4 	bl	8001d48 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fff0 	bl	8001d48 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e207      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xc0>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd ffe0 	bl	8001d48 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd ffdc 	bl	8001d48 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1f3      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0xe8>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1c7      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_OscConfig+0x244>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd ff95 	bl	8001d48 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd ff91 	bl	8001d48 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1a8      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4925      	ldr	r1, [pc, #148]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x244>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd ff74 	bl	8001d48 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fd ff70 	bl	8001d48 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e187      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d036      	beq.n	8003efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x248>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd ff54 	bl	8001d48 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fd ff50 	bl	8001d48 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e167      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x200>
 8003ec2:	e01b      	b.n	8003efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_OscConfig+0x248>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7fd ff3d 	bl	8001d48 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd ff39 	bl	8001d48 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d907      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e150      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	4b88      	ldr	r3, [pc, #544]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ea      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8097 	beq.w	8004038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0e:	4b81      	ldr	r3, [pc, #516]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b7d      	ldr	r3, [pc, #500]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b7a      	ldr	r3, [pc, #488]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b77      	ldr	r3, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f46:	4b74      	ldr	r3, [pc, #464]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a73      	ldr	r2, [pc, #460]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fd fef9 	bl	8001d48 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd fef5 	bl	8001d48 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e10c      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x474>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x2ea>
 8003f80:	4b64      	ldr	r3, [pc, #400]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a63      	ldr	r2, [pc, #396]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x324>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x30c>
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a5e      	ldr	r2, [pc, #376]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a5b      	ldr	r2, [pc, #364]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x324>
 8003fb0:	4b58      	ldr	r3, [pc, #352]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a57      	ldr	r2, [pc, #348]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b55      	ldr	r3, [pc, #340]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a54      	ldr	r2, [pc, #336]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd feba 	bl	8001d48 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd feb6 	bl	8001d48 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0cb      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b49      	ldr	r3, [pc, #292]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x334>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffc:	f7fd fea4 	bl	8001d48 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd fea0 	bl	8001d48 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0b5      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b39      	ldr	r3, [pc, #228]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a1 	beq.w	8004184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b08      	cmp	r3, #8
 800404c:	d05c      	beq.n	8004108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d141      	bne.n	80040da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x478>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd fe74 	bl	8001d48 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd fe70 	bl	8001d48 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e087      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	491b      	ldr	r1, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x478>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b2:	f7fd fe49 	bl	8001d48 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd fe45 	bl	8001d48 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e05c      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x416>
 80040d8:	e054      	b.n	8004184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_RCC_OscConfig+0x478>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd fe32 	bl	8001d48 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fe2e 	bl	8001d48 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e045      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCC_OscConfig+0x470>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x444>
 8004106:	e03d      	b.n	8004184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e038      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
 8004114:	40023800 	.word	0x40023800
 8004118:	40007000 	.word	0x40007000
 800411c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d028      	beq.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d121      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d11a      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004158:	4293      	cmp	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	3b01      	subs	r3, #1
 800416a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d107      	bne.n	8004180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cc      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	2b03      	cmp	r3, #3
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e067      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fd fd60 	bl	8001d48 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fd fd5c 	bl	8001d48 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20c      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd fcc0 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023c00 	.word	0x40023c00
 8004350:	40023800 	.word	0x40023800
 8004354:	0800725c 	.word	0x0800725c
 8004358:	20000004 	.word	0x20000004
 800435c:	20000008 	.word	0x20000008

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004364:	b090      	sub	sp, #64	; 0x40
 8004366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
 800436c:	2300      	movs	r3, #0
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004370:	2300      	movs	r3, #0
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004378:	4b59      	ldr	r3, [pc, #356]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d00d      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004384:	2b08      	cmp	r3, #8
 8004386:	f200 80a1 	bhi.w	80044cc <HAL_RCC_GetSysClockFreq+0x16c>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
 800438e:	2b04      	cmp	r3, #4
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x3a>
 8004392:	e09b      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004398:	e09b      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439a:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439e:	e098      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d028      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	2200      	movs	r2, #0
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	627a      	str	r2, [r7, #36]	; 0x24
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043c8:	2100      	movs	r1, #0
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043cc:	fb03 f201 	mul.w	r2, r3, r1
 80043d0:	2300      	movs	r3, #0
 80043d2:	fb00 f303 	mul.w	r3, r0, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	4a43      	ldr	r2, [pc, #268]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043da:	fba0 1202 	umull	r1, r2, r0, r2
 80043de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e0:	460a      	mov	r2, r1
 80043e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80043e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e6:	4413      	add	r3, r2
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	2200      	movs	r2, #0
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	61fa      	str	r2, [r7, #28]
 80043f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043fa:	f7fb ff49 	bl	8000290 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4613      	mov	r3, r2
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004406:	e053      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	2200      	movs	r2, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	617a      	str	r2, [r7, #20]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800441a:	f04f 0b00 	mov.w	fp, #0
 800441e:	4652      	mov	r2, sl
 8004420:	465b      	mov	r3, fp
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	ebb2 080a 	subs.w	r8, r2, sl
 800443a:	eb63 090b 	sbc.w	r9, r3, fp
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800444a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800444e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004452:	ebb2 0408 	subs.w	r4, r2, r8
 8004456:	eb63 0509 	sbc.w	r5, r3, r9
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	00eb      	lsls	r3, r5, #3
 8004464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004468:	00e2      	lsls	r2, r4, #3
 800446a:	4614      	mov	r4, r2
 800446c:	461d      	mov	r5, r3
 800446e:	eb14 030a 	adds.w	r3, r4, sl
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	eb45 030b 	adc.w	r3, r5, fp
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004486:	4629      	mov	r1, r5
 8004488:	028b      	lsls	r3, r1, #10
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004490:	4621      	mov	r1, r4
 8004492:	028a      	lsls	r2, r1, #10
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	2200      	movs	r2, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	60fa      	str	r2, [r7, #12]
 80044a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a4:	f7fb fef4 	bl	8000290 <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4613      	mov	r3, r2
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	0c1b      	lsrs	r3, r3, #16
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	3301      	adds	r3, #1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3740      	adds	r7, #64	; 0x40
 80044d8:	46bd      	mov	sp, r7
 80044da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	00f42400 	.word	0x00f42400
 80044e8:	017d7840 	.word	0x017d7840

080044ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000004 	.word	0x20000004

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004508:	f7ff fff0 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0a9b      	lsrs	r3, r3, #10
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	0800726c 	.word	0x0800726c

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004530:	f7ff ffdc 	bl	80044ec <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0b5b      	lsrs	r3, r3, #13
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	0800726c 	.word	0x0800726c

08004554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d075      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004588:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458e:	f7fd fbdb 	bl	8001d48 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004596:	f7fd fbd7 	bl	8001d48 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e189      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a8:	4b8a      	ldr	r3, [pc, #552]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	019a      	lsls	r2, r3, #6
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	071b      	lsls	r3, r3, #28
 80045cc:	4981      	ldr	r1, [pc, #516]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01f      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045e0:	4b7c      	ldr	r3, [pc, #496]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	0f1b      	lsrs	r3, r3, #28
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	019a      	lsls	r2, r3, #6
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	431a      	orrs	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	071b      	lsls	r3, r3, #28
 8004600:	4974      	ldr	r1, [pc, #464]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004608:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800460a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460e:	f023 021f 	bic.w	r2, r3, #31
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	3b01      	subs	r3, #1
 8004618:	496e      	ldr	r1, [pc, #440]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	019a      	lsls	r2, r3, #6
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	071b      	lsls	r3, r3, #28
 8004640:	4964      	ldr	r1, [pc, #400]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800464e:	f7fd fb7b 	bl	8001d48 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004656:	f7fd fb77 	bl	8001d48 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e129      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004668:	4b5a      	ldr	r3, [pc, #360]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004688:	2b00      	cmp	r3, #0
 800468a:	d079      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800468c:	4b52      	ldr	r3, [pc, #328]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004692:	f7fd fb59 	bl	8001d48 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800469a:	f7fd fb55 	bl	8001d48 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e107      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046ac:	4b49      	ldr	r3, [pc, #292]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b8:	d0ef      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046c6:	4b43      	ldr	r3, [pc, #268]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	0f1b      	lsrs	r3, r3, #28
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	019a      	lsls	r2, r3, #6
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	431a      	orrs	r2, r3
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	493b      	ldr	r1, [pc, #236]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4934      	ldr	r1, [pc, #208]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01e      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004714:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	0e1b      	lsrs	r3, r3, #24
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	019a      	lsls	r2, r3, #6
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	071b      	lsls	r3, r3, #28
 8004734:	4927      	ldr	r1, [pc, #156]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800473e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	4922      	ldr	r1, [pc, #136]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004758:	f7fd faf6 	bl	8001d48 <HAL_GetTick>
 800475c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004760:	f7fd faf2 	bl	8001d48 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0a4      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004772:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477e:	d1ef      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 808b 	beq.w	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b6:	f7fd fac7 	bl	8001d48 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047bc:	e010      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047be:	f7fd fac3 	bl	8001d48 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d909      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e075      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80047d0:	42470068 	.word	0x42470068
 80047d4:	40023800 	.word	0x40023800
 80047d8:	42470070 	.word	0x42470070
 80047dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e0:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0e8      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ec:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d028      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480a:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d114      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004832:	f7fd fa89 	bl	8001d48 <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd fa85 	bl	8001d48 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e035      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004868:	d10d      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	4912      	ldr	r1, [pc, #72]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
 8004884:	e005      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800488c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004890:	6093      	str	r3, [r2, #8]
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004894:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80048b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40007000 	.word	0x40007000
 80048c8:	40023800 	.word	0x40023800
 80048cc:	42470e40 	.word	0x42470e40
 80048d0:	424711e0 	.word	0x424711e0

080048d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e066      	b.n	80049b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7f5b      	ldrb	r3, [r3, #29]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc fe80 	bl	8001600 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	22ca      	movs	r2, #202	; 0xca
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2253      	movs	r2, #83	; 0x53
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f87a 	bl	8004a10 <RTC_EnterInitMode>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d12c      	bne.n	8004980 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004938:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6899      	ldr	r1, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68d2      	ldr	r2, [r2, #12]
 8004960:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6919      	ldr	r1, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	041a      	lsls	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f881 	bl	8004a7e <RTC_ExitInitMode>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d113      	bne.n	80049ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	22ff      	movs	r2, #255	; 0xff
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049dc:	f7fd f9b4 	bl	8001d48 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049e2:	e009      	b.n	80049f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049e4:	f7fd f9b0 	bl	8001d48 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f2:	d901      	bls.n	80049f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e007      	b.n	8004a08 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ee      	beq.n	80049e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d122      	bne.n	8004a74 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3e:	f7fd f983 	bl	8001d48 <HAL_GetTick>
 8004a42:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a44:	e00c      	b.n	8004a60 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a46:	f7fd f97f 	bl	8001d48 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a54:	d904      	bls.n	8004a60 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <RTC_EnterInitMode+0x64>
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d1e8      	bne.n	8004a46 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a98:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff89 	bl	80049c0 <HAL_RTC_WaitForSynchro>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e041      	b.n	8004b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc ffb2 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 fc7a 	bl	8005400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e04e      	b.n	8004c1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d01d      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d111      	bne.n	8004c0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d010      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	e007      	b.n	8004c1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40010400 	.word	0x40010400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40001800 	.word	0x40001800

08004c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e041      	b.n	8004cde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f839 	bl	8004ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 fbba 	bl	8005400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_TIM_PWM_Start+0x24>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e022      	b.n	8004d66 <HAL_TIM_PWM_Start+0x6a>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d109      	bne.n	8004d3a <HAL_TIM_PWM_Start+0x3e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e015      	b.n	8004d66 <HAL_TIM_PWM_Start+0x6a>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x58>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e008      	b.n	8004d66 <HAL_TIM_PWM_Start+0x6a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e07c      	b.n	8004e68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x82>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_PWM_Start+0xaa>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_PWM_Start+0x92>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d8c:	e00b      	b.n	8004da6 <HAL_TIM_PWM_Start+0xaa>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_PWM_Start+0xa2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d9c:	e003      	b.n	8004da6 <HAL_TIM_PWM_Start+0xaa>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2201      	movs	r2, #1
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fe10 	bl	80059d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <HAL_TIM_PWM_Start+0x174>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_TIM_PWM_Start+0xcc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	; (8004e74 <HAL_TIM_PWM_Start+0x178>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_PWM_Start+0xd0>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Start+0xd2>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <HAL_TIM_PWM_Start+0x174>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d022      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d01d      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <HAL_TIM_PWM_Start+0x17c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d018      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_TIM_PWM_Start+0x180>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_TIM_PWM_Start+0x184>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00e      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_TIM_PWM_Start+0x178>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d009      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_TIM_PWM_Start+0x188>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d004      	beq.n	8004e32 <HAL_TIM_PWM_Start+0x136>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_TIM_PWM_Start+0x18c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d111      	bne.n	8004e56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b06      	cmp	r3, #6
 8004e42:	d010      	beq.n	8004e66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e54:	e007      	b.n	8004e66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40001800 	.word	0x40001800

08004e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0202 	mvn.w	r2, #2
 8004eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fa77 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa69 	bl	80053ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fa7a 	bl	80053d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0204 	mvn.w	r2, #4
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa4d 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fa3f 	bl	80053ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fa50 	bl	80053d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d122      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d11b      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0208 	mvn.w	r2, #8
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2204      	movs	r2, #4
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa23 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa15 	bl	80053ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fa26 	bl	80053d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d122      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d11b      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0210 	mvn.w	r2, #16
 8004fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f9f9 	bl	80053c2 <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9eb 	bl	80053ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9fc 	bl	80053d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0201 	mvn.w	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc f9f6 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005028:	2b80      	cmp	r3, #128	; 0x80
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fd78 	bl	8005b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f9c1 	bl	80053ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b20      	cmp	r3, #32
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0220 	mvn.w	r2, #32
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd42 	bl	8005b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e0ae      	b.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	f200 809f 	bhi.w	8005208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	08005105 	.word	0x08005105
 80050d4:	08005209 	.word	0x08005209
 80050d8:	08005209 	.word	0x08005209
 80050dc:	08005209 	.word	0x08005209
 80050e0:	08005145 	.word	0x08005145
 80050e4:	08005209 	.word	0x08005209
 80050e8:	08005209 	.word	0x08005209
 80050ec:	08005209 	.word	0x08005209
 80050f0:	08005187 	.word	0x08005187
 80050f4:	08005209 	.word	0x08005209
 80050f8:	08005209 	.word	0x08005209
 80050fc:	08005209 	.word	0x08005209
 8005100:	080051c7 	.word	0x080051c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fa18 	bl	8005540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0208 	orr.w	r2, r2, #8
 800511e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0204 	bic.w	r2, r2, #4
 800512e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6999      	ldr	r1, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]
      break;
 8005142:	e064      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fa68 	bl	8005620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	619a      	str	r2, [r3, #24]
      break;
 8005184:	e043      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fabd 	bl	800570c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0208 	orr.w	r2, r2, #8
 80051a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0204 	bic.w	r2, r2, #4
 80051b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69d9      	ldr	r1, [r3, #28]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	61da      	str	r2, [r3, #28]
      break;
 80051c4:	e023      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fb11 	bl	80057f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	61da      	str	r2, [r3, #28]
      break;
 8005206:	e002      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      break;
 800520c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_TIM_ConfigClockSource+0x1c>
 8005238:	2302      	movs	r3, #2
 800523a:	e0b4      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x186>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800525a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005274:	d03e      	beq.n	80052f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527a:	f200 8087 	bhi.w	800538c <HAL_TIM_ConfigClockSource+0x16c>
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005282:	f000 8086 	beq.w	8005392 <HAL_TIM_ConfigClockSource+0x172>
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	d87f      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d01a      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005290:	2b70      	cmp	r3, #112	; 0x70
 8005292:	d87b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d050      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x11a>
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d877      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d03c      	beq.n	800531a <HAL_TIM_ConfigClockSource+0xfa>
 80052a0:	2b50      	cmp	r3, #80	; 0x50
 80052a2:	d873      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d058      	beq.n	800535a <HAL_TIM_ConfigClockSource+0x13a>
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d86f      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d064      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x15a>
 80052b0:	2b30      	cmp	r3, #48	; 0x30
 80052b2:	d86b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d060      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x15a>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d867      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05c      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x15a>
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d05a      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x15a>
 80052c4:	e062      	b.n	800538c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6899      	ldr	r1, [r3, #8]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f000 fb5d 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	609a      	str	r2, [r3, #8]
      break;
 80052f2:	e04f      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6899      	ldr	r1, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f000 fb46 	bl	8005994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005316:	609a      	str	r2, [r3, #8]
      break;
 8005318:	e03c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	f000 faba 	bl	80058a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2150      	movs	r1, #80	; 0x50
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fb13 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 8005338:	e02c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6859      	ldr	r1, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	f000 fad9 	bl	80058fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2160      	movs	r1, #96	; 0x60
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fb03 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 8005358:	e01c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6859      	ldr	r1, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	461a      	mov	r2, r3
 8005368:	f000 fa9a 	bl	80058a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	4618      	mov	r0, r3
 8005374:	f000 faf3 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 8005378:	e00c      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f000 faea 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 800538a:	e003      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
      break;
 8005390:	e000      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a40      	ldr	r2, [pc, #256]	; (8005514 <TIM_Base_SetConfig+0x114>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a3d      	ldr	r2, [pc, #244]	; (8005518 <TIM_Base_SetConfig+0x118>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3c      	ldr	r2, [pc, #240]	; (800551c <TIM_Base_SetConfig+0x11c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a3b      	ldr	r2, [pc, #236]	; (8005520 <TIM_Base_SetConfig+0x120>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3a      	ldr	r2, [pc, #232]	; (8005524 <TIM_Base_SetConfig+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <TIM_Base_SetConfig+0x114>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005460:	d027      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <TIM_Base_SetConfig+0x118>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d023      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2b      	ldr	r2, [pc, #172]	; (800551c <TIM_Base_SetConfig+0x11c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01f      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <TIM_Base_SetConfig+0x120>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a29      	ldr	r2, [pc, #164]	; (8005524 <TIM_Base_SetConfig+0x124>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d017      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a28      	ldr	r2, [pc, #160]	; (8005528 <TIM_Base_SetConfig+0x128>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <TIM_Base_SetConfig+0x12c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a26      	ldr	r2, [pc, #152]	; (8005530 <TIM_Base_SetConfig+0x130>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <TIM_Base_SetConfig+0x134>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a24      	ldr	r2, [pc, #144]	; (8005538 <TIM_Base_SetConfig+0x138>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a23      	ldr	r2, [pc, #140]	; (800553c <TIM_Base_SetConfig+0x13c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <TIM_Base_SetConfig+0x114>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_Base_SetConfig+0xf8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <TIM_Base_SetConfig+0x124>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d103      	bne.n	8005500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	615a      	str	r2, [r3, #20]
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	40001800 	.word	0x40001800
 8005538:	40001c00 	.word	0x40001c00
 800553c:	40002000 	.word	0x40002000

08005540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f023 0302 	bic.w	r3, r3, #2
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a20      	ldr	r2, [pc, #128]	; (8005618 <TIM_OC1_SetConfig+0xd8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC1_SetConfig+0x64>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1f      	ldr	r2, [pc, #124]	; (800561c <TIM_OC1_SetConfig+0xdc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10c      	bne.n	80055be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0308 	bic.w	r3, r3, #8
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f023 0304 	bic.w	r3, r3, #4
 80055bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC1_SetConfig+0xd8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC1_SetConfig+0x8e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <TIM_OC1_SetConfig+0xdc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000
 800561c:	40010400 	.word	0x40010400

08005620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0320 	bic.w	r3, r3, #32
 800566a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a22      	ldr	r2, [pc, #136]	; (8005704 <TIM_OC2_SetConfig+0xe4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC2_SetConfig+0x68>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a21      	ldr	r2, [pc, #132]	; (8005708 <TIM_OC2_SetConfig+0xe8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10d      	bne.n	80056a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a17      	ldr	r2, [pc, #92]	; (8005704 <TIM_OC2_SetConfig+0xe4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC2_SetConfig+0x94>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a16      	ldr	r2, [pc, #88]	; (8005708 <TIM_OC2_SetConfig+0xe8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d113      	bne.n	80056dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40010400 	.word	0x40010400

0800570c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_OC3_SetConfig+0xe0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC3_SetConfig+0x66>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <TIM_OC3_SetConfig+0xe4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10d      	bne.n	800578e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <TIM_OC3_SetConfig+0xe0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_OC3_SetConfig+0x92>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <TIM_OC3_SetConfig+0xe4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d113      	bne.n	80057c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400

080057f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800583e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	031b      	lsls	r3, r3, #12
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <TIM_OC4_SetConfig+0xa4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC4_SetConfig+0x68>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a11      	ldr	r2, [pc, #68]	; (800589c <TIM_OC4_SetConfig+0xa8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d109      	bne.n	8005870 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0201 	bic.w	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 030a 	bic.w	r3, r3, #10
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	f043 0307 	orr.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e05a      	b.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d022      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d01d      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d018      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10c      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40010400 	.word	0x40010400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40001800 	.word	0x40001800

08005b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e03f      	b.n	8005bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d106      	bne.n	8005b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc f816 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f829 	bl	8005bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b0c0      	sub	sp, #256	; 0x100
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	68d9      	ldr	r1, [r3, #12]
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	ea40 0301 	orr.w	r3, r0, r1
 8005c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c34:	f021 010c 	bic.w	r1, r1, #12
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c42:	430b      	orrs	r3, r1
 8005c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c56:	6999      	ldr	r1, [r3, #24]
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	ea40 0301 	orr.w	r3, r0, r1
 8005c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ea8 <UART_SetConfig+0x2cc>)
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <UART_SetConfig+0xa0>
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <UART_SetConfig+0x2d0>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d104      	bne.n	8005c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c7c:	f7fe fc56 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 8005c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c84:	e003      	b.n	8005c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c86:	f7fe fc3d 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 8005c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c98:	f040 810c 	bne.w	8005eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cae:	4622      	mov	r2, r4
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	1891      	adds	r1, r2, r2
 8005cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cb6:	415b      	adcs	r3, r3
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	eb12 0801 	adds.w	r8, r2, r1
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	eb43 0901 	adc.w	r9, r3, r1
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cde:	4690      	mov	r8, r2
 8005ce0:	4699      	mov	r9, r3
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	eb18 0303 	adds.w	r3, r8, r3
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cec:	462b      	mov	r3, r5
 8005cee:	eb49 0303 	adc.w	r3, r9, r3
 8005cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	18db      	adds	r3, r3, r3
 8005d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d10:	4613      	mov	r3, r2
 8005d12:	eb42 0303 	adc.w	r3, r2, r3
 8005d16:	657b      	str	r3, [r7, #84]	; 0x54
 8005d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d20:	f7fa fab6 	bl	8000290 <__aeabi_uldivmod>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	011c      	lsls	r4, r3, #4
 8005d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	1891      	adds	r1, r2, r2
 8005d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d4c:	415b      	adcs	r3, r3
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d54:	4641      	mov	r1, r8
 8005d56:	eb12 0a01 	adds.w	sl, r2, r1
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d74:	4692      	mov	sl, r2
 8005d76:	469b      	mov	fp, r3
 8005d78:	4643      	mov	r3, r8
 8005d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d82:	464b      	mov	r3, r9
 8005d84:	eb4b 0303 	adc.w	r3, fp, r3
 8005d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005da0:	460b      	mov	r3, r1
 8005da2:	18db      	adds	r3, r3, r3
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
 8005da6:	4613      	mov	r3, r2
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	647b      	str	r3, [r7, #68]	; 0x44
 8005dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005db6:	f7fa fa6b 	bl	8000290 <__aeabi_uldivmod>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	2264      	movs	r2, #100	; 0x64
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	1acb      	subs	r3, r1, r3
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dd6:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005de4:	441c      	add	r4, r3
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005df8:	4642      	mov	r2, r8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e00:	415b      	adcs	r3, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e08:	4641      	mov	r1, r8
 8005e0a:	1851      	adds	r1, r2, r1
 8005e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e0e:	4649      	mov	r1, r9
 8005e10:	414b      	adcs	r3, r1
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e20:	4659      	mov	r1, fp
 8005e22:	00cb      	lsls	r3, r1, #3
 8005e24:	4651      	mov	r1, sl
 8005e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	00ca      	lsls	r2, r1, #3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	4619      	mov	r1, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	4642      	mov	r2, r8
 8005e36:	189b      	adds	r3, r3, r2
 8005e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	460a      	mov	r2, r1
 8005e40:	eb42 0303 	adc.w	r3, r2, r3
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	18db      	adds	r3, r3, r3
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e62:	4613      	mov	r3, r2
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e72:	f7fa fa0d 	bl	8000290 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	; 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3332      	adds	r3, #50	; 0x32
 8005e8e:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f003 0207 	and.w	r2, r3, #7
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4422      	add	r2, r4
 8005ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ea4:	e105      	b.n	80060b2 <UART_SetConfig+0x4d6>
 8005ea6:	bf00      	nop
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	464b      	mov	r3, r9
 8005eca:	1891      	adds	r1, r2, r2
 8005ecc:	6239      	str	r1, [r7, #32]
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	1854      	adds	r4, r2, r1
 8005eda:	4649      	mov	r1, r9
 8005edc:	eb43 0501 	adc.w	r5, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	00eb      	lsls	r3, r5, #3
 8005eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eee:	00e2      	lsls	r2, r4, #3
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	461d      	mov	r5, r3
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	18e3      	adds	r3, r4, r3
 8005ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005efc:	464b      	mov	r3, r9
 8005efe:	eb45 0303 	adc.w	r3, r5, r3
 8005f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f22:	4629      	mov	r1, r5
 8005f24:	008b      	lsls	r3, r1, #2
 8005f26:	4621      	mov	r1, r4
 8005f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	008a      	lsls	r2, r1, #2
 8005f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f34:	f7fa f9ac 	bl	8000290 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b60      	ldr	r3, [pc, #384]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	011c      	lsls	r4, r3, #4
 8005f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	1891      	adds	r1, r2, r2
 8005f5e:	61b9      	str	r1, [r7, #24]
 8005f60:	415b      	adcs	r3, r3
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f68:	4641      	mov	r1, r8
 8005f6a:	1851      	adds	r1, r2, r1
 8005f6c:	6139      	str	r1, [r7, #16]
 8005f6e:	4649      	mov	r1, r9
 8005f70:	414b      	adcs	r3, r1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f80:	4659      	mov	r1, fp
 8005f82:	00cb      	lsls	r3, r1, #3
 8005f84:	4651      	mov	r1, sl
 8005f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	00ca      	lsls	r2, r1, #3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	4642      	mov	r2, r8
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	008b      	lsls	r3, r1, #2
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fca:	4641      	mov	r1, r8
 8005fcc:	008a      	lsls	r2, r1, #2
 8005fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fd2:	f7fa f95d 	bl	8000290 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4b39      	ldr	r3, [pc, #228]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	; 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a34      	ldr	r2, [pc, #208]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffa:	441c      	add	r4, r3
 8005ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006000:	2200      	movs	r2, #0
 8006002:	673b      	str	r3, [r7, #112]	; 0x70
 8006004:	677a      	str	r2, [r7, #116]	; 0x74
 8006006:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800600a:	4642      	mov	r2, r8
 800600c:	464b      	mov	r3, r9
 800600e:	1891      	adds	r1, r2, r2
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	415b      	adcs	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	4641      	mov	r1, r8
 800601c:	1851      	adds	r1, r2, r1
 800601e:	6039      	str	r1, [r7, #0]
 8006020:	4649      	mov	r1, r9
 8006022:	414b      	adcs	r3, r1
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006032:	4659      	mov	r1, fp
 8006034:	00cb      	lsls	r3, r1, #3
 8006036:	4651      	mov	r1, sl
 8006038:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800603c:	4651      	mov	r1, sl
 800603e:	00ca      	lsls	r2, r1, #3
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	4603      	mov	r3, r0
 8006046:	4642      	mov	r2, r8
 8006048:	189b      	adds	r3, r3, r2
 800604a:	66bb      	str	r3, [r7, #104]	; 0x68
 800604c:	464b      	mov	r3, r9
 800604e:	460a      	mov	r2, r1
 8006050:	eb42 0303 	adc.w	r3, r2, r3
 8006054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	663b      	str	r3, [r7, #96]	; 0x60
 8006060:	667a      	str	r2, [r7, #100]	; 0x64
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800606e:	4649      	mov	r1, r9
 8006070:	008b      	lsls	r3, r1, #2
 8006072:	4641      	mov	r1, r8
 8006074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006078:	4641      	mov	r1, r8
 800607a:	008a      	lsls	r2, r1, #2
 800607c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006080:	f7fa f906 	bl	8000290 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <UART_SetConfig+0x4e4>)
 800608a:	fba3 1302 	umull	r1, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2164      	movs	r1, #100	; 0x64
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	3332      	adds	r3, #50	; 0x32
 800609c:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <UART_SetConfig+0x4e4>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4422      	add	r2, r4
 80060b0:	609a      	str	r2, [r3, #8]
}
 80060b2:	bf00      	nop
 80060b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060b8:	46bd      	mov	sp, r7
 80060ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060be:	bf00      	nop
 80060c0:	51eb851f 	.word	0x51eb851f

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	; (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20000010 	.word	0x20000010

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	4d0d      	ldr	r5, [pc, #52]	; (8006108 <__libc_init_array+0x38>)
 80060d4:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d6:	1b64      	subs	r4, r4, r5
 80060d8:	10a4      	asrs	r4, r4, #2
 80060da:	2600      	movs	r6, #0
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	4d0b      	ldr	r5, [pc, #44]	; (8006110 <__libc_init_array+0x40>)
 80060e2:	4c0c      	ldr	r4, [pc, #48]	; (8006114 <__libc_init_array+0x44>)
 80060e4:	f001 f866 	bl	80071b4 <_init>
 80060e8:	1b64      	subs	r4, r4, r5
 80060ea:	10a4      	asrs	r4, r4, #2
 80060ec:	2600      	movs	r6, #0
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	080073cc 	.word	0x080073cc
 800610c:	080073cc 	.word	0x080073cc
 8006110:	080073cc 	.word	0x080073cc
 8006114:	080073d0 	.word	0x080073d0

08006118 <memcpy>:
 8006118:	440a      	add	r2, r1
 800611a:	4291      	cmp	r1, r2
 800611c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006120:	d100      	bne.n	8006124 <memcpy+0xc>
 8006122:	4770      	bx	lr
 8006124:	b510      	push	{r4, lr}
 8006126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800612e:	4291      	cmp	r1, r2
 8006130:	d1f9      	bne.n	8006126 <memcpy+0xe>
 8006132:	bd10      	pop	{r4, pc}

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <rand>:
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <rand+0x5c>)
 8006146:	b510      	push	{r4, lr}
 8006148:	681c      	ldr	r4, [r3, #0]
 800614a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800614c:	b9b3      	cbnz	r3, 800617c <rand+0x38>
 800614e:	2018      	movs	r0, #24
 8006150:	f000 f866 	bl	8006220 <malloc>
 8006154:	63a0      	str	r0, [r4, #56]	; 0x38
 8006156:	b928      	cbnz	r0, 8006164 <rand+0x20>
 8006158:	4602      	mov	r2, r0
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <rand+0x60>)
 800615c:	4812      	ldr	r0, [pc, #72]	; (80061a8 <rand+0x64>)
 800615e:	214e      	movs	r1, #78	; 0x4e
 8006160:	f000 f82e 	bl	80061c0 <__assert_func>
 8006164:	4a11      	ldr	r2, [pc, #68]	; (80061ac <rand+0x68>)
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <rand+0x6c>)
 8006168:	e9c0 2300 	strd	r2, r3, [r0]
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <rand+0x70>)
 800616e:	6083      	str	r3, [r0, #8]
 8006170:	230b      	movs	r3, #11
 8006172:	8183      	strh	r3, [r0, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	2300      	movs	r3, #0
 8006178:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800617c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800617e:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <rand+0x74>)
 8006180:	6920      	ldr	r0, [r4, #16]
 8006182:	6963      	ldr	r3, [r4, #20]
 8006184:	490d      	ldr	r1, [pc, #52]	; (80061bc <rand+0x78>)
 8006186:	4342      	muls	r2, r0
 8006188:	fb01 2203 	mla	r2, r1, r3, r2
 800618c:	fba0 0101 	umull	r0, r1, r0, r1
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	eb42 0001 	adc.w	r0, r2, r1
 8006196:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800619a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800619e:	bd10      	pop	{r4, pc}
 80061a0:	20000010 	.word	0x20000010
 80061a4:	08007280 	.word	0x08007280
 80061a8:	08007297 	.word	0x08007297
 80061ac:	abcd330e 	.word	0xabcd330e
 80061b0:	e66d1234 	.word	0xe66d1234
 80061b4:	0005deec 	.word	0x0005deec
 80061b8:	5851f42d 	.word	0x5851f42d
 80061bc:	4c957f2d 	.word	0x4c957f2d

080061c0 <__assert_func>:
 80061c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061c2:	4614      	mov	r4, r2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <__assert_func+0x2c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4605      	mov	r5, r0
 80061cc:	68d8      	ldr	r0, [r3, #12]
 80061ce:	b14c      	cbz	r4, 80061e4 <__assert_func+0x24>
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <__assert_func+0x30>)
 80061d2:	9100      	str	r1, [sp, #0]
 80061d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061d8:	4906      	ldr	r1, [pc, #24]	; (80061f4 <__assert_func+0x34>)
 80061da:	462b      	mov	r3, r5
 80061dc:	f000 f80e 	bl	80061fc <fiprintf>
 80061e0:	f000 fcc4 	bl	8006b6c <abort>
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <__assert_func+0x38>)
 80061e6:	461c      	mov	r4, r3
 80061e8:	e7f3      	b.n	80061d2 <__assert_func+0x12>
 80061ea:	bf00      	nop
 80061ec:	20000010 	.word	0x20000010
 80061f0:	080072f2 	.word	0x080072f2
 80061f4:	080072ff 	.word	0x080072ff
 80061f8:	0800732d 	.word	0x0800732d

080061fc <fiprintf>:
 80061fc:	b40e      	push	{r1, r2, r3}
 80061fe:	b503      	push	{r0, r1, lr}
 8006200:	4601      	mov	r1, r0
 8006202:	ab03      	add	r3, sp, #12
 8006204:	4805      	ldr	r0, [pc, #20]	; (800621c <fiprintf+0x20>)
 8006206:	f853 2b04 	ldr.w	r2, [r3], #4
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	f000 f919 	bl	8006444 <_vfiprintf_r>
 8006212:	b002      	add	sp, #8
 8006214:	f85d eb04 	ldr.w	lr, [sp], #4
 8006218:	b003      	add	sp, #12
 800621a:	4770      	bx	lr
 800621c:	20000010 	.word	0x20000010

08006220 <malloc>:
 8006220:	4b02      	ldr	r3, [pc, #8]	; (800622c <malloc+0xc>)
 8006222:	4601      	mov	r1, r0
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	f000 b86f 	b.w	8006308 <_malloc_r>
 800622a:	bf00      	nop
 800622c:	20000010 	.word	0x20000010

08006230 <_free_r>:
 8006230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006232:	2900      	cmp	r1, #0
 8006234:	d044      	beq.n	80062c0 <_free_r+0x90>
 8006236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623a:	9001      	str	r0, [sp, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f1a1 0404 	sub.w	r4, r1, #4
 8006242:	bfb8      	it	lt
 8006244:	18e4      	addlt	r4, r4, r3
 8006246:	f000 feb9 	bl	8006fbc <__malloc_lock>
 800624a:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <_free_r+0x94>)
 800624c:	9801      	ldr	r0, [sp, #4]
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	b933      	cbnz	r3, 8006260 <_free_r+0x30>
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	b003      	add	sp, #12
 8006258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800625c:	f000 beb4 	b.w	8006fc8 <__malloc_unlock>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d908      	bls.n	8006276 <_free_r+0x46>
 8006264:	6825      	ldr	r5, [r4, #0]
 8006266:	1961      	adds	r1, r4, r5
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1949      	addeq	r1, r1, r5
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	e7ed      	b.n	8006252 <_free_r+0x22>
 8006276:	461a      	mov	r2, r3
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b10b      	cbz	r3, 8006280 <_free_r+0x50>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d9fa      	bls.n	8006276 <_free_r+0x46>
 8006280:	6811      	ldr	r1, [r2, #0]
 8006282:	1855      	adds	r5, r2, r1
 8006284:	42a5      	cmp	r5, r4
 8006286:	d10b      	bne.n	80062a0 <_free_r+0x70>
 8006288:	6824      	ldr	r4, [r4, #0]
 800628a:	4421      	add	r1, r4
 800628c:	1854      	adds	r4, r2, r1
 800628e:	42a3      	cmp	r3, r4
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	d1e0      	bne.n	8006256 <_free_r+0x26>
 8006294:	681c      	ldr	r4, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	6053      	str	r3, [r2, #4]
 800629a:	4421      	add	r1, r4
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	e7da      	b.n	8006256 <_free_r+0x26>
 80062a0:	d902      	bls.n	80062a8 <_free_r+0x78>
 80062a2:	230c      	movs	r3, #12
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	e7d6      	b.n	8006256 <_free_r+0x26>
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	1961      	adds	r1, r4, r5
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf04      	itt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	6063      	str	r3, [r4, #4]
 80062b6:	bf04      	itt	eq
 80062b8:	1949      	addeq	r1, r1, r5
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	6054      	str	r4, [r2, #4]
 80062be:	e7ca      	b.n	8006256 <_free_r+0x26>
 80062c0:	b003      	add	sp, #12
 80062c2:	bd30      	pop	{r4, r5, pc}
 80062c4:	20000298 	.word	0x20000298

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0e      	ldr	r6, [pc, #56]	; (8006304 <sbrk_aligned+0x3c>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 fb7a 	bl	80069cc <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fb75 	bl	80069cc <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d00a      	beq.n	80062fc <sbrk_aligned+0x34>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d007      	beq.n	8006300 <sbrk_aligned+0x38>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fb6a 	bl	80069cc <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d101      	bne.n	8006300 <sbrk_aligned+0x38>
 80062fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006300:	4620      	mov	r0, r4
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	2000029c 	.word	0x2000029c

08006308 <_malloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	1ccd      	adds	r5, r1, #3
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	2d00      	cmp	r5, #0
 800631c:	4607      	mov	r7, r0
 800631e:	db01      	blt.n	8006324 <_malloc_r+0x1c>
 8006320:	42a9      	cmp	r1, r5
 8006322:	d905      	bls.n	8006330 <_malloc_r+0x28>
 8006324:	230c      	movs	r3, #12
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	2600      	movs	r6, #0
 800632a:	4630      	mov	r0, r6
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4e2e      	ldr	r6, [pc, #184]	; (80063ec <_malloc_r+0xe4>)
 8006332:	f000 fe43 	bl	8006fbc <__malloc_lock>
 8006336:	6833      	ldr	r3, [r6, #0]
 8006338:	461c      	mov	r4, r3
 800633a:	bb34      	cbnz	r4, 800638a <_malloc_r+0x82>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ffc2 	bl	80062c8 <sbrk_aligned>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	4604      	mov	r4, r0
 8006348:	d14d      	bne.n	80063e6 <_malloc_r+0xde>
 800634a:	6834      	ldr	r4, [r6, #0]
 800634c:	4626      	mov	r6, r4
 800634e:	2e00      	cmp	r6, #0
 8006350:	d140      	bne.n	80063d4 <_malloc_r+0xcc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	4631      	mov	r1, r6
 8006356:	4638      	mov	r0, r7
 8006358:	eb04 0803 	add.w	r8, r4, r3
 800635c:	f000 fb36 	bl	80069cc <_sbrk_r>
 8006360:	4580      	cmp	r8, r0
 8006362:	d13a      	bne.n	80063da <_malloc_r+0xd2>
 8006364:	6821      	ldr	r1, [r4, #0]
 8006366:	3503      	adds	r5, #3
 8006368:	1a6d      	subs	r5, r5, r1
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	4629      	mov	r1, r5
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff ffa5 	bl	80062c8 <sbrk_aligned>
 800637e:	3001      	adds	r0, #1
 8006380:	d02b      	beq.n	80063da <_malloc_r+0xd2>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	442b      	add	r3, r5
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	e00e      	b.n	80063a8 <_malloc_r+0xa0>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	d41e      	bmi.n	80063ce <_malloc_r+0xc6>
 8006390:	2a0b      	cmp	r2, #11
 8006392:	d916      	bls.n	80063c2 <_malloc_r+0xba>
 8006394:	1961      	adds	r1, r4, r5
 8006396:	42a3      	cmp	r3, r4
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	bf18      	it	ne
 800639c:	6059      	strne	r1, [r3, #4]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	bf08      	it	eq
 80063a2:	6031      	streq	r1, [r6, #0]
 80063a4:	5162      	str	r2, [r4, r5]
 80063a6:	604b      	str	r3, [r1, #4]
 80063a8:	4638      	mov	r0, r7
 80063aa:	f104 060b 	add.w	r6, r4, #11
 80063ae:	f000 fe0b 	bl	8006fc8 <__malloc_unlock>
 80063b2:	f026 0607 	bic.w	r6, r6, #7
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	1af2      	subs	r2, r6, r3
 80063ba:	d0b6      	beq.n	800632a <_malloc_r+0x22>
 80063bc:	1b9b      	subs	r3, r3, r6
 80063be:	50a3      	str	r3, [r4, r2]
 80063c0:	e7b3      	b.n	800632a <_malloc_r+0x22>
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bf0c      	ite	eq
 80063c8:	6032      	streq	r2, [r6, #0]
 80063ca:	605a      	strne	r2, [r3, #4]
 80063cc:	e7ec      	b.n	80063a8 <_malloc_r+0xa0>
 80063ce:	4623      	mov	r3, r4
 80063d0:	6864      	ldr	r4, [r4, #4]
 80063d2:	e7b2      	b.n	800633a <_malloc_r+0x32>
 80063d4:	4634      	mov	r4, r6
 80063d6:	6876      	ldr	r6, [r6, #4]
 80063d8:	e7b9      	b.n	800634e <_malloc_r+0x46>
 80063da:	230c      	movs	r3, #12
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4638      	mov	r0, r7
 80063e0:	f000 fdf2 	bl	8006fc8 <__malloc_unlock>
 80063e4:	e7a1      	b.n	800632a <_malloc_r+0x22>
 80063e6:	6025      	str	r5, [r4, #0]
 80063e8:	e7de      	b.n	80063a8 <_malloc_r+0xa0>
 80063ea:	bf00      	nop
 80063ec:	20000298 	.word	0x20000298

080063f0 <__sfputc_r>:
 80063f0:	6893      	ldr	r3, [r2, #8]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	b410      	push	{r4}
 80063f8:	6093      	str	r3, [r2, #8]
 80063fa:	da08      	bge.n	800640e <__sfputc_r+0x1e>
 80063fc:	6994      	ldr	r4, [r2, #24]
 80063fe:	42a3      	cmp	r3, r4
 8006400:	db01      	blt.n	8006406 <__sfputc_r+0x16>
 8006402:	290a      	cmp	r1, #10
 8006404:	d103      	bne.n	800640e <__sfputc_r+0x1e>
 8006406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640a:	f000 baef 	b.w	80069ec <__swbuf_r>
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	1c58      	adds	r0, r3, #1
 8006412:	6010      	str	r0, [r2, #0]
 8006414:	7019      	strb	r1, [r3, #0]
 8006416:	4608      	mov	r0, r1
 8006418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641c:	4770      	bx	lr

0800641e <__sfputs_r>:
 800641e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006420:	4606      	mov	r6, r0
 8006422:	460f      	mov	r7, r1
 8006424:	4614      	mov	r4, r2
 8006426:	18d5      	adds	r5, r2, r3
 8006428:	42ac      	cmp	r4, r5
 800642a:	d101      	bne.n	8006430 <__sfputs_r+0x12>
 800642c:	2000      	movs	r0, #0
 800642e:	e007      	b.n	8006440 <__sfputs_r+0x22>
 8006430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006434:	463a      	mov	r2, r7
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ffda 	bl	80063f0 <__sfputc_r>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d1f3      	bne.n	8006428 <__sfputs_r+0xa>
 8006440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006444 <_vfiprintf_r>:
 8006444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	460d      	mov	r5, r1
 800644a:	b09d      	sub	sp, #116	; 0x74
 800644c:	4614      	mov	r4, r2
 800644e:	4698      	mov	r8, r3
 8006450:	4606      	mov	r6, r0
 8006452:	b118      	cbz	r0, 800645c <_vfiprintf_r+0x18>
 8006454:	6983      	ldr	r3, [r0, #24]
 8006456:	b90b      	cbnz	r3, 800645c <_vfiprintf_r+0x18>
 8006458:	f000 fcaa 	bl	8006db0 <__sinit>
 800645c:	4b89      	ldr	r3, [pc, #548]	; (8006684 <_vfiprintf_r+0x240>)
 800645e:	429d      	cmp	r5, r3
 8006460:	d11b      	bne.n	800649a <_vfiprintf_r+0x56>
 8006462:	6875      	ldr	r5, [r6, #4]
 8006464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <_vfiprintf_r+0x32>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <_vfiprintf_r+0x32>
 8006470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006472:	f000 fd3b 	bl	8006eec <__retarget_lock_acquire_recursive>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	d501      	bpl.n	8006480 <_vfiprintf_r+0x3c>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	b9eb      	cbnz	r3, 80064bc <_vfiprintf_r+0x78>
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f000 fb04 	bl	8006a90 <__swsetup_r>
 8006488:	b1c0      	cbz	r0, 80064bc <_vfiprintf_r+0x78>
 800648a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800648c:	07dc      	lsls	r4, r3, #31
 800648e:	d50e      	bpl.n	80064ae <_vfiprintf_r+0x6a>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	b01d      	add	sp, #116	; 0x74
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	4b7b      	ldr	r3, [pc, #492]	; (8006688 <_vfiprintf_r+0x244>)
 800649c:	429d      	cmp	r5, r3
 800649e:	d101      	bne.n	80064a4 <_vfiprintf_r+0x60>
 80064a0:	68b5      	ldr	r5, [r6, #8]
 80064a2:	e7df      	b.n	8006464 <_vfiprintf_r+0x20>
 80064a4:	4b79      	ldr	r3, [pc, #484]	; (800668c <_vfiprintf_r+0x248>)
 80064a6:	429d      	cmp	r5, r3
 80064a8:	bf08      	it	eq
 80064aa:	68f5      	ldreq	r5, [r6, #12]
 80064ac:	e7da      	b.n	8006464 <_vfiprintf_r+0x20>
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	0598      	lsls	r0, r3, #22
 80064b2:	d4ed      	bmi.n	8006490 <_vfiprintf_r+0x4c>
 80064b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b6:	f000 fd1a 	bl	8006eee <__retarget_lock_release_recursive>
 80064ba:	e7e9      	b.n	8006490 <_vfiprintf_r+0x4c>
 80064bc:	2300      	movs	r3, #0
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	2320      	movs	r3, #32
 80064c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ca:	2330      	movs	r3, #48	; 0x30
 80064cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006690 <_vfiprintf_r+0x24c>
 80064d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d4:	f04f 0901 	mov.w	r9, #1
 80064d8:	4623      	mov	r3, r4
 80064da:	469a      	mov	sl, r3
 80064dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e0:	b10a      	cbz	r2, 80064e6 <_vfiprintf_r+0xa2>
 80064e2:	2a25      	cmp	r2, #37	; 0x25
 80064e4:	d1f9      	bne.n	80064da <_vfiprintf_r+0x96>
 80064e6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ea:	d00b      	beq.n	8006504 <_vfiprintf_r+0xc0>
 80064ec:	465b      	mov	r3, fp
 80064ee:	4622      	mov	r2, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ff93 	bl	800641e <__sfputs_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	f000 80aa 	beq.w	8006652 <_vfiprintf_r+0x20e>
 80064fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006500:	445a      	add	r2, fp
 8006502:	9209      	str	r2, [sp, #36]	; 0x24
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a2 	beq.w	8006652 <_vfiprintf_r+0x20e>
 800650e:	2300      	movs	r3, #0
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006524:	931a      	str	r3, [sp, #104]	; 0x68
 8006526:	4654      	mov	r4, sl
 8006528:	2205      	movs	r2, #5
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4858      	ldr	r0, [pc, #352]	; (8006690 <_vfiprintf_r+0x24c>)
 8006530:	f7f9 fe5e 	bl	80001f0 <memchr>
 8006534:	9a04      	ldr	r2, [sp, #16]
 8006536:	b9d8      	cbnz	r0, 8006570 <_vfiprintf_r+0x12c>
 8006538:	06d1      	lsls	r1, r2, #27
 800653a:	bf44      	itt	mi
 800653c:	2320      	movmi	r3, #32
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006542:	0713      	lsls	r3, r2, #28
 8006544:	bf44      	itt	mi
 8006546:	232b      	movmi	r3, #43	; 0x2b
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b2a      	cmp	r3, #42	; 0x2a
 8006552:	d015      	beq.n	8006580 <_vfiprintf_r+0x13c>
 8006554:	9a07      	ldr	r2, [sp, #28]
 8006556:	4654      	mov	r4, sl
 8006558:	2000      	movs	r0, #0
 800655a:	f04f 0c0a 	mov.w	ip, #10
 800655e:	4621      	mov	r1, r4
 8006560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006564:	3b30      	subs	r3, #48	; 0x30
 8006566:	2b09      	cmp	r3, #9
 8006568:	d94e      	bls.n	8006608 <_vfiprintf_r+0x1c4>
 800656a:	b1b0      	cbz	r0, 800659a <_vfiprintf_r+0x156>
 800656c:	9207      	str	r2, [sp, #28]
 800656e:	e014      	b.n	800659a <_vfiprintf_r+0x156>
 8006570:	eba0 0308 	sub.w	r3, r0, r8
 8006574:	fa09 f303 	lsl.w	r3, r9, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	46a2      	mov	sl, r4
 800657e:	e7d2      	b.n	8006526 <_vfiprintf_r+0xe2>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbb      	ittet	lt
 800658c:	425b      	neglt	r3, r3
 800658e:	f042 0202 	orrlt.w	r2, r2, #2
 8006592:	9307      	strge	r3, [sp, #28]
 8006594:	9307      	strlt	r3, [sp, #28]
 8006596:	bfb8      	it	lt
 8006598:	9204      	strlt	r2, [sp, #16]
 800659a:	7823      	ldrb	r3, [r4, #0]
 800659c:	2b2e      	cmp	r3, #46	; 0x2e
 800659e:	d10c      	bne.n	80065ba <_vfiprintf_r+0x176>
 80065a0:	7863      	ldrb	r3, [r4, #1]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d135      	bne.n	8006612 <_vfiprintf_r+0x1ce>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9203      	str	r2, [sp, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfb8      	it	lt
 80065b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b6:	3402      	adds	r4, #2
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066a0 <_vfiprintf_r+0x25c>
 80065be:	7821      	ldrb	r1, [r4, #0]
 80065c0:	2203      	movs	r2, #3
 80065c2:	4650      	mov	r0, sl
 80065c4:	f7f9 fe14 	bl	80001f0 <memchr>
 80065c8:	b140      	cbz	r0, 80065dc <_vfiprintf_r+0x198>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	eba0 000a 	sub.w	r0, r0, sl
 80065d0:	fa03 f000 	lsl.w	r0, r3, r0
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	4303      	orrs	r3, r0
 80065d8:	3401      	adds	r4, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	482c      	ldr	r0, [pc, #176]	; (8006694 <_vfiprintf_r+0x250>)
 80065e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e6:	2206      	movs	r2, #6
 80065e8:	f7f9 fe02 	bl	80001f0 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d03f      	beq.n	8006670 <_vfiprintf_r+0x22c>
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <_vfiprintf_r+0x254>)
 80065f2:	bb1b      	cbnz	r3, 800663c <_vfiprintf_r+0x1f8>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	3307      	adds	r3, #7
 80065f8:	f023 0307 	bic.w	r3, r3, #7
 80065fc:	3308      	adds	r3, #8
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	443b      	add	r3, r7
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	e767      	b.n	80064d8 <_vfiprintf_r+0x94>
 8006608:	fb0c 3202 	mla	r2, ip, r2, r3
 800660c:	460c      	mov	r4, r1
 800660e:	2001      	movs	r0, #1
 8006610:	e7a5      	b.n	800655e <_vfiprintf_r+0x11a>
 8006612:	2300      	movs	r3, #0
 8006614:	3401      	adds	r4, #1
 8006616:	9305      	str	r3, [sp, #20]
 8006618:	4619      	mov	r1, r3
 800661a:	f04f 0c0a 	mov.w	ip, #10
 800661e:	4620      	mov	r0, r4
 8006620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006624:	3a30      	subs	r2, #48	; 0x30
 8006626:	2a09      	cmp	r2, #9
 8006628:	d903      	bls.n	8006632 <_vfiprintf_r+0x1ee>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c5      	beq.n	80065ba <_vfiprintf_r+0x176>
 800662e:	9105      	str	r1, [sp, #20]
 8006630:	e7c3      	b.n	80065ba <_vfiprintf_r+0x176>
 8006632:	fb0c 2101 	mla	r1, ip, r1, r2
 8006636:	4604      	mov	r4, r0
 8006638:	2301      	movs	r3, #1
 800663a:	e7f0      	b.n	800661e <_vfiprintf_r+0x1da>
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <_vfiprintf_r+0x258>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4630      	mov	r0, r6
 8006648:	f3af 8000 	nop.w
 800664c:	4607      	mov	r7, r0
 800664e:	1c78      	adds	r0, r7, #1
 8006650:	d1d6      	bne.n	8006600 <_vfiprintf_r+0x1bc>
 8006652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d405      	bmi.n	8006664 <_vfiprintf_r+0x220>
 8006658:	89ab      	ldrh	r3, [r5, #12]
 800665a:	059a      	lsls	r2, r3, #22
 800665c:	d402      	bmi.n	8006664 <_vfiprintf_r+0x220>
 800665e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006660:	f000 fc45 	bl	8006eee <__retarget_lock_release_recursive>
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	065b      	lsls	r3, r3, #25
 8006668:	f53f af12 	bmi.w	8006490 <_vfiprintf_r+0x4c>
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	e711      	b.n	8006494 <_vfiprintf_r+0x50>
 8006670:	ab03      	add	r3, sp, #12
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	462a      	mov	r2, r5
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <_vfiprintf_r+0x258>)
 8006678:	a904      	add	r1, sp, #16
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f880 	bl	8006780 <_printf_i>
 8006680:	e7e4      	b.n	800664c <_vfiprintf_r+0x208>
 8006682:	bf00      	nop
 8006684:	08007384 	.word	0x08007384
 8006688:	080073a4 	.word	0x080073a4
 800668c:	08007364 	.word	0x08007364
 8006690:	0800732e 	.word	0x0800732e
 8006694:	08007338 	.word	0x08007338
 8006698:	00000000 	.word	0x00000000
 800669c:	0800641f 	.word	0x0800641f
 80066a0:	08007334 	.word	0x08007334

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f0:	1e13      	subs	r3, r2, #0
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	68e5      	ldr	r5, [r4, #12]
 800670e:	6832      	ldr	r2, [r6, #0]
 8006710:	f003 0306 	and.w	r3, r3, #6
 8006714:	2b04      	cmp	r3, #4
 8006716:	bf08      	it	eq
 8006718:	1aad      	subeq	r5, r5, r2
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d8 	beq.w	8006952 <_printf_i+0x1d2>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80a3 	beq.w	80068ee <_printf_i+0x16e>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	08006939 	.word	0x08006939
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800691b 	.word	0x0800691b
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800695b 	.word	0x0800695b
 8006804:	080067a9 	.word	0x080067a9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	08006923 	.word	0x08006923
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e0a3      	b.n	8006974 <_printf_i+0x1f4>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	f101 0304 	add.w	r3, r1, #4
 8006836:	d50a      	bpl.n	800684e <_printf_i+0xce>
 8006838:	680e      	ldr	r6, [r1, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2e00      	cmp	r6, #0
 800683e:	da03      	bge.n	8006848 <_printf_i+0xc8>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	4276      	negs	r6, r6
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	485e      	ldr	r0, [pc, #376]	; (80069c4 <_printf_i+0x244>)
 800684a:	230a      	movs	r3, #10
 800684c:	e019      	b.n	8006882 <_printf_i+0x102>
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006856:	bf18      	it	ne
 8006858:	b236      	sxthne	r6, r6
 800685a:	e7ef      	b.n	800683c <_printf_i+0xbc>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	0601      	lsls	r1, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xec>
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0xf2>
 800686c:	0646      	lsls	r6, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xe8>
 8006870:	881e      	ldrh	r6, [r3, #0]
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_printf_i+0x244>)
 8006874:	2f6f      	cmp	r7, #111	; 0x6f
 8006876:	bf0c      	ite	eq
 8006878:	2308      	moveq	r3, #8
 800687a:	230a      	movne	r3, #10
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006882:	6865      	ldr	r5, [r4, #4]
 8006884:	60a5      	str	r5, [r4, #8]
 8006886:	2d00      	cmp	r5, #0
 8006888:	bfa2      	ittt	ge
 800688a:	6821      	ldrge	r1, [r4, #0]
 800688c:	f021 0104 	bicge.w	r1, r1, #4
 8006890:	6021      	strge	r1, [r4, #0]
 8006892:	b90e      	cbnz	r6, 8006898 <_printf_i+0x118>
 8006894:	2d00      	cmp	r5, #0
 8006896:	d04d      	beq.n	8006934 <_printf_i+0x1b4>
 8006898:	4615      	mov	r5, r2
 800689a:	fbb6 f1f3 	udiv	r1, r6, r3
 800689e:	fb03 6711 	mls	r7, r3, r1, r6
 80068a2:	5dc7      	ldrb	r7, [r0, r7]
 80068a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a8:	4637      	mov	r7, r6
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	460e      	mov	r6, r1
 80068ae:	d9f4      	bls.n	800689a <_printf_i+0x11a>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10b      	bne.n	80068cc <_printf_i+0x14c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07de      	lsls	r6, r3, #31
 80068b8:	d508      	bpl.n	80068cc <_printf_i+0x14c>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4299      	cmp	r1, r3
 80068c0:	bfde      	ittt	le
 80068c2:	2330      	movle	r3, #48	; 0x30
 80068c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	6122      	str	r2, [r4, #16]
 80068d0:	f8cd a000 	str.w	sl, [sp]
 80068d4:	464b      	mov	r3, r9
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff fee2 	bl	80066a4 <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14c      	bne.n	800697e <_printf_i+0x1fe>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b004      	add	sp, #16
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	4835      	ldr	r0, [pc, #212]	; (80069c4 <_printf_i+0x244>)
 80068f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fc:	6029      	str	r1, [r5, #0]
 80068fe:	061d      	lsls	r5, r3, #24
 8006900:	d514      	bpl.n	800692c <_printf_i+0x1ac>
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	bf44      	itt	mi
 8006906:	f043 0320 	orrmi.w	r3, r3, #32
 800690a:	6023      	strmi	r3, [r4, #0]
 800690c:	b91e      	cbnz	r6, 8006916 <_printf_i+0x196>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f023 0320 	bic.w	r3, r3, #32
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	2310      	movs	r3, #16
 8006918:	e7b0      	b.n	800687c <_printf_i+0xfc>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0320 	orr.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	2378      	movs	r3, #120	; 0x78
 8006924:	4828      	ldr	r0, [pc, #160]	; (80069c8 <_printf_i+0x248>)
 8006926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692a:	e7e3      	b.n	80068f4 <_printf_i+0x174>
 800692c:	0659      	lsls	r1, r3, #25
 800692e:	bf48      	it	mi
 8006930:	b2b6      	uxthmi	r6, r6
 8006932:	e7e6      	b.n	8006902 <_printf_i+0x182>
 8006934:	4615      	mov	r5, r2
 8006936:	e7bb      	b.n	80068b0 <_printf_i+0x130>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	6826      	ldr	r6, [r4, #0]
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6028      	str	r0, [r5, #0]
 8006942:	0635      	lsls	r5, r6, #24
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	d501      	bpl.n	800694c <_printf_i+0x1cc>
 8006948:	6019      	str	r1, [r3, #0]
 800694a:	e002      	b.n	8006952 <_printf_i+0x1d2>
 800694c:	0670      	lsls	r0, r6, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0x1c8>
 8006950:	8019      	strh	r1, [r3, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	4615      	mov	r5, r2
 8006958:	e7ba      	b.n	80068d0 <_printf_i+0x150>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fc42 	bl	80001f0 <memchr>
 800696c:	b108      	cbz	r0, 8006972 <_printf_i+0x1f2>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e7a8      	b.n	80068d0 <_printf_i+0x150>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d0ab      	beq.n	80068e4 <_printf_i+0x164>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	d413      	bmi.n	80069ba <_printf_i+0x23a>
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	4298      	cmp	r0, r3
 8006998:	bfb8      	it	lt
 800699a:	4618      	movlt	r0, r3
 800699c:	e7a4      	b.n	80068e8 <_printf_i+0x168>
 800699e:	2301      	movs	r3, #1
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d09b      	beq.n	80068e4 <_printf_i+0x164>
 80069ac:	3501      	adds	r5, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	9903      	ldr	r1, [sp, #12]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dcf2      	bgt.n	800699e <_printf_i+0x21e>
 80069b8:	e7eb      	b.n	8006992 <_printf_i+0x212>
 80069ba:	2500      	movs	r5, #0
 80069bc:	f104 0619 	add.w	r6, r4, #25
 80069c0:	e7f5      	b.n	80069ae <_printf_i+0x22e>
 80069c2:	bf00      	nop
 80069c4:	0800733f 	.word	0x0800733f
 80069c8:	08007350 	.word	0x08007350

080069cc <_sbrk_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d06      	ldr	r5, [pc, #24]	; (80069e8 <_sbrk_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fa ff32 	bl	8001840 <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_sbrk_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_sbrk_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	200002a4 	.word	0x200002a4

080069ec <__swbuf_r>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	460e      	mov	r6, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	4605      	mov	r5, r0
 80069f4:	b118      	cbz	r0, 80069fe <__swbuf_r+0x12>
 80069f6:	6983      	ldr	r3, [r0, #24]
 80069f8:	b90b      	cbnz	r3, 80069fe <__swbuf_r+0x12>
 80069fa:	f000 f9d9 	bl	8006db0 <__sinit>
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <__swbuf_r+0x98>)
 8006a00:	429c      	cmp	r4, r3
 8006a02:	d12b      	bne.n	8006a5c <__swbuf_r+0x70>
 8006a04:	686c      	ldr	r4, [r5, #4]
 8006a06:	69a3      	ldr	r3, [r4, #24]
 8006a08:	60a3      	str	r3, [r4, #8]
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	071a      	lsls	r2, r3, #28
 8006a0e:	d52f      	bpl.n	8006a70 <__swbuf_r+0x84>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	b36b      	cbz	r3, 8006a70 <__swbuf_r+0x84>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1ac0      	subs	r0, r0, r3
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	b2f6      	uxtb	r6, r6
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	4637      	mov	r7, r6
 8006a22:	dc04      	bgt.n	8006a2e <__swbuf_r+0x42>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 f92e 	bl	8006c88 <_fflush_r>
 8006a2c:	bb30      	cbnz	r0, 8006a7c <__swbuf_r+0x90>
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	6022      	str	r2, [r4, #0]
 8006a3a:	701e      	strb	r6, [r3, #0]
 8006a3c:	6963      	ldr	r3, [r4, #20]
 8006a3e:	3001      	adds	r0, #1
 8006a40:	4283      	cmp	r3, r0
 8006a42:	d004      	beq.n	8006a4e <__swbuf_r+0x62>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	07db      	lsls	r3, r3, #31
 8006a48:	d506      	bpl.n	8006a58 <__swbuf_r+0x6c>
 8006a4a:	2e0a      	cmp	r6, #10
 8006a4c:	d104      	bne.n	8006a58 <__swbuf_r+0x6c>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 f919 	bl	8006c88 <_fflush_r>
 8006a56:	b988      	cbnz	r0, 8006a7c <__swbuf_r+0x90>
 8006a58:	4638      	mov	r0, r7
 8006a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <__swbuf_r+0x9c>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d101      	bne.n	8006a66 <__swbuf_r+0x7a>
 8006a62:	68ac      	ldr	r4, [r5, #8]
 8006a64:	e7cf      	b.n	8006a06 <__swbuf_r+0x1a>
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <__swbuf_r+0xa0>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	bf08      	it	eq
 8006a6c:	68ec      	ldreq	r4, [r5, #12]
 8006a6e:	e7ca      	b.n	8006a06 <__swbuf_r+0x1a>
 8006a70:	4621      	mov	r1, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 f80c 	bl	8006a90 <__swsetup_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0cb      	beq.n	8006a14 <__swbuf_r+0x28>
 8006a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a80:	e7ea      	b.n	8006a58 <__swbuf_r+0x6c>
 8006a82:	bf00      	nop
 8006a84:	08007384 	.word	0x08007384
 8006a88:	080073a4 	.word	0x080073a4
 8006a8c:	08007364 	.word	0x08007364

08006a90 <__swsetup_r>:
 8006a90:	4b32      	ldr	r3, [pc, #200]	; (8006b5c <__swsetup_r+0xcc>)
 8006a92:	b570      	push	{r4, r5, r6, lr}
 8006a94:	681d      	ldr	r5, [r3, #0]
 8006a96:	4606      	mov	r6, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	b125      	cbz	r5, 8006aa6 <__swsetup_r+0x16>
 8006a9c:	69ab      	ldr	r3, [r5, #24]
 8006a9e:	b913      	cbnz	r3, 8006aa6 <__swsetup_r+0x16>
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 f985 	bl	8006db0 <__sinit>
 8006aa6:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <__swsetup_r+0xd0>)
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d10f      	bne.n	8006acc <__swsetup_r+0x3c>
 8006aac:	686c      	ldr	r4, [r5, #4]
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab4:	0719      	lsls	r1, r3, #28
 8006ab6:	d42c      	bmi.n	8006b12 <__swsetup_r+0x82>
 8006ab8:	06dd      	lsls	r5, r3, #27
 8006aba:	d411      	bmi.n	8006ae0 <__swsetup_r+0x50>
 8006abc:	2309      	movs	r3, #9
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aca:	e03e      	b.n	8006b4a <__swsetup_r+0xba>
 8006acc:	4b25      	ldr	r3, [pc, #148]	; (8006b64 <__swsetup_r+0xd4>)
 8006ace:	429c      	cmp	r4, r3
 8006ad0:	d101      	bne.n	8006ad6 <__swsetup_r+0x46>
 8006ad2:	68ac      	ldr	r4, [r5, #8]
 8006ad4:	e7eb      	b.n	8006aae <__swsetup_r+0x1e>
 8006ad6:	4b24      	ldr	r3, [pc, #144]	; (8006b68 <__swsetup_r+0xd8>)
 8006ad8:	429c      	cmp	r4, r3
 8006ada:	bf08      	it	eq
 8006adc:	68ec      	ldreq	r4, [r5, #12]
 8006ade:	e7e6      	b.n	8006aae <__swsetup_r+0x1e>
 8006ae0:	0758      	lsls	r0, r3, #29
 8006ae2:	d512      	bpl.n	8006b0a <__swsetup_r+0x7a>
 8006ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae6:	b141      	cbz	r1, 8006afa <__swsetup_r+0x6a>
 8006ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <__swsetup_r+0x66>
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff fb9d 	bl	8006230 <_free_r>
 8006af6:	2300      	movs	r3, #0
 8006af8:	6363      	str	r3, [r4, #52]	; 0x34
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	2300      	movs	r3, #0
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	6923      	ldr	r3, [r4, #16]
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f043 0308 	orr.w	r3, r3, #8
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	b94b      	cbnz	r3, 8006b2a <__swsetup_r+0x9a>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b20:	d003      	beq.n	8006b2a <__swsetup_r+0x9a>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 fa09 	bl	8006f3c <__smakebuf_r>
 8006b2a:	89a0      	ldrh	r0, [r4, #12]
 8006b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b30:	f010 0301 	ands.w	r3, r0, #1
 8006b34:	d00a      	beq.n	8006b4c <__swsetup_r+0xbc>
 8006b36:	2300      	movs	r3, #0
 8006b38:	60a3      	str	r3, [r4, #8]
 8006b3a:	6963      	ldr	r3, [r4, #20]
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	61a3      	str	r3, [r4, #24]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	b943      	cbnz	r3, 8006b56 <__swsetup_r+0xc6>
 8006b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b48:	d1ba      	bne.n	8006ac0 <__swsetup_r+0x30>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	0781      	lsls	r1, r0, #30
 8006b4e:	bf58      	it	pl
 8006b50:	6963      	ldrpl	r3, [r4, #20]
 8006b52:	60a3      	str	r3, [r4, #8]
 8006b54:	e7f4      	b.n	8006b40 <__swsetup_r+0xb0>
 8006b56:	2000      	movs	r0, #0
 8006b58:	e7f7      	b.n	8006b4a <__swsetup_r+0xba>
 8006b5a:	bf00      	nop
 8006b5c:	20000010 	.word	0x20000010
 8006b60:	08007384 	.word	0x08007384
 8006b64:	080073a4 	.word	0x080073a4
 8006b68:	08007364 	.word	0x08007364

08006b6c <abort>:
 8006b6c:	b508      	push	{r3, lr}
 8006b6e:	2006      	movs	r0, #6
 8006b70:	f000 fa58 	bl	8007024 <raise>
 8006b74:	2001      	movs	r0, #1
 8006b76:	f7fa fdeb 	bl	8001750 <_exit>
	...

08006b7c <__sflush_r>:
 8006b7c:	898a      	ldrh	r2, [r1, #12]
 8006b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b82:	4605      	mov	r5, r0
 8006b84:	0710      	lsls	r0, r2, #28
 8006b86:	460c      	mov	r4, r1
 8006b88:	d458      	bmi.n	8006c3c <__sflush_r+0xc0>
 8006b8a:	684b      	ldr	r3, [r1, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc05      	bgt.n	8006b9c <__sflush_r+0x20>
 8006b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	dc02      	bgt.n	8006b9c <__sflush_r+0x20>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	d0f9      	beq.n	8006b96 <__sflush_r+0x1a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ba8:	682f      	ldr	r7, [r5, #0]
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	d032      	beq.n	8006c14 <__sflush_r+0x98>
 8006bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	075a      	lsls	r2, r3, #29
 8006bb4:	d505      	bpl.n	8006bc2 <__sflush_r+0x46>
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	1ac0      	subs	r0, r0, r3
 8006bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bbc:	b10b      	cbz	r3, 8006bc2 <__sflush_r+0x46>
 8006bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bc0:	1ac0      	subs	r0, r0, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b0      	blx	r6
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	d106      	bne.n	8006be2 <__sflush_r+0x66>
 8006bd4:	6829      	ldr	r1, [r5, #0]
 8006bd6:	291d      	cmp	r1, #29
 8006bd8:	d82c      	bhi.n	8006c34 <__sflush_r+0xb8>
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <__sflush_r+0x108>)
 8006bdc:	40ca      	lsrs	r2, r1
 8006bde:	07d6      	lsls	r6, r2, #31
 8006be0:	d528      	bpl.n	8006c34 <__sflush_r+0xb8>
 8006be2:	2200      	movs	r2, #0
 8006be4:	6062      	str	r2, [r4, #4]
 8006be6:	04d9      	lsls	r1, r3, #19
 8006be8:	6922      	ldr	r2, [r4, #16]
 8006bea:	6022      	str	r2, [r4, #0]
 8006bec:	d504      	bpl.n	8006bf8 <__sflush_r+0x7c>
 8006bee:	1c42      	adds	r2, r0, #1
 8006bf0:	d101      	bne.n	8006bf6 <__sflush_r+0x7a>
 8006bf2:	682b      	ldr	r3, [r5, #0]
 8006bf4:	b903      	cbnz	r3, 8006bf8 <__sflush_r+0x7c>
 8006bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8006bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bfa:	602f      	str	r7, [r5, #0]
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d0ca      	beq.n	8006b96 <__sflush_r+0x1a>
 8006c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c04:	4299      	cmp	r1, r3
 8006c06:	d002      	beq.n	8006c0e <__sflush_r+0x92>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7ff fb11 	bl	8006230 <_free_r>
 8006c0e:	2000      	movs	r0, #0
 8006c10:	6360      	str	r0, [r4, #52]	; 0x34
 8006c12:	e7c1      	b.n	8006b98 <__sflush_r+0x1c>
 8006c14:	6a21      	ldr	r1, [r4, #32]
 8006c16:	2301      	movs	r3, #1
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b0      	blx	r6
 8006c1c:	1c41      	adds	r1, r0, #1
 8006c1e:	d1c7      	bne.n	8006bb0 <__sflush_r+0x34>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0c4      	beq.n	8006bb0 <__sflush_r+0x34>
 8006c26:	2b1d      	cmp	r3, #29
 8006c28:	d001      	beq.n	8006c2e <__sflush_r+0xb2>
 8006c2a:	2b16      	cmp	r3, #22
 8006c2c:	d101      	bne.n	8006c32 <__sflush_r+0xb6>
 8006c2e:	602f      	str	r7, [r5, #0]
 8006c30:	e7b1      	b.n	8006b96 <__sflush_r+0x1a>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	e7ad      	b.n	8006b98 <__sflush_r+0x1c>
 8006c3c:	690f      	ldr	r7, [r1, #16]
 8006c3e:	2f00      	cmp	r7, #0
 8006c40:	d0a9      	beq.n	8006b96 <__sflush_r+0x1a>
 8006c42:	0793      	lsls	r3, r2, #30
 8006c44:	680e      	ldr	r6, [r1, #0]
 8006c46:	bf08      	it	eq
 8006c48:	694b      	ldreq	r3, [r1, #20]
 8006c4a:	600f      	str	r7, [r1, #0]
 8006c4c:	bf18      	it	ne
 8006c4e:	2300      	movne	r3, #0
 8006c50:	eba6 0807 	sub.w	r8, r6, r7
 8006c54:	608b      	str	r3, [r1, #8]
 8006c56:	f1b8 0f00 	cmp.w	r8, #0
 8006c5a:	dd9c      	ble.n	8006b96 <__sflush_r+0x1a>
 8006c5c:	6a21      	ldr	r1, [r4, #32]
 8006c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c60:	4643      	mov	r3, r8
 8006c62:	463a      	mov	r2, r7
 8006c64:	4628      	mov	r0, r5
 8006c66:	47b0      	blx	r6
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	dc06      	bgt.n	8006c7a <__sflush_r+0xfe>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	e78e      	b.n	8006b98 <__sflush_r+0x1c>
 8006c7a:	4407      	add	r7, r0
 8006c7c:	eba8 0800 	sub.w	r8, r8, r0
 8006c80:	e7e9      	b.n	8006c56 <__sflush_r+0xda>
 8006c82:	bf00      	nop
 8006c84:	20400001 	.word	0x20400001

08006c88 <_fflush_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	690b      	ldr	r3, [r1, #16]
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	b913      	cbnz	r3, 8006c98 <_fflush_r+0x10>
 8006c92:	2500      	movs	r5, #0
 8006c94:	4628      	mov	r0, r5
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	b118      	cbz	r0, 8006ca2 <_fflush_r+0x1a>
 8006c9a:	6983      	ldr	r3, [r0, #24]
 8006c9c:	b90b      	cbnz	r3, 8006ca2 <_fflush_r+0x1a>
 8006c9e:	f000 f887 	bl	8006db0 <__sinit>
 8006ca2:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <_fflush_r+0x6c>)
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	d11b      	bne.n	8006ce0 <_fflush_r+0x58>
 8006ca8:	686c      	ldr	r4, [r5, #4]
 8006caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0ef      	beq.n	8006c92 <_fflush_r+0xa>
 8006cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d404      	bmi.n	8006cc2 <_fflush_r+0x3a>
 8006cb8:	0599      	lsls	r1, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_fflush_r+0x3a>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cbe:	f000 f915 	bl	8006eec <__retarget_lock_acquire_recursive>
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	f7ff ff59 	bl	8006b7c <__sflush_r>
 8006cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ccc:	07da      	lsls	r2, r3, #31
 8006cce:	4605      	mov	r5, r0
 8006cd0:	d4e0      	bmi.n	8006c94 <_fflush_r+0xc>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	059b      	lsls	r3, r3, #22
 8006cd6:	d4dd      	bmi.n	8006c94 <_fflush_r+0xc>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cda:	f000 f908 	bl	8006eee <__retarget_lock_release_recursive>
 8006cde:	e7d9      	b.n	8006c94 <_fflush_r+0xc>
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <_fflush_r+0x70>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d101      	bne.n	8006cea <_fflush_r+0x62>
 8006ce6:	68ac      	ldr	r4, [r5, #8]
 8006ce8:	e7df      	b.n	8006caa <_fflush_r+0x22>
 8006cea:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <_fflush_r+0x74>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	bf08      	it	eq
 8006cf0:	68ec      	ldreq	r4, [r5, #12]
 8006cf2:	e7da      	b.n	8006caa <_fflush_r+0x22>
 8006cf4:	08007384 	.word	0x08007384
 8006cf8:	080073a4 	.word	0x080073a4
 8006cfc:	08007364 	.word	0x08007364

08006d00 <std>:
 8006d00:	2300      	movs	r3, #0
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d0e:	6083      	str	r3, [r0, #8]
 8006d10:	8181      	strh	r1, [r0, #12]
 8006d12:	6643      	str	r3, [r0, #100]	; 0x64
 8006d14:	81c2      	strh	r2, [r0, #14]
 8006d16:	6183      	str	r3, [r0, #24]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	305c      	adds	r0, #92	; 0x5c
 8006d1e:	f7ff fa09 	bl	8006134 <memset>
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x38>)
 8006d24:	6263      	str	r3, [r4, #36]	; 0x24
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x3c>)
 8006d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <std+0x40>)
 8006d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x44>)
 8006d30:	6224      	str	r4, [r4, #32]
 8006d32:	6323      	str	r3, [r4, #48]	; 0x30
 8006d34:	bd10      	pop	{r4, pc}
 8006d36:	bf00      	nop
 8006d38:	0800705d 	.word	0x0800705d
 8006d3c:	0800707f 	.word	0x0800707f
 8006d40:	080070b7 	.word	0x080070b7
 8006d44:	080070db 	.word	0x080070db

08006d48 <_cleanup_r>:
 8006d48:	4901      	ldr	r1, [pc, #4]	; (8006d50 <_cleanup_r+0x8>)
 8006d4a:	f000 b8af 	b.w	8006eac <_fwalk_reent>
 8006d4e:	bf00      	nop
 8006d50:	08006c89 	.word	0x08006c89

08006d54 <__sfmoreglue>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	2268      	movs	r2, #104	; 0x68
 8006d58:	1e4d      	subs	r5, r1, #1
 8006d5a:	4355      	muls	r5, r2
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d62:	f7ff fad1 	bl	8006308 <_malloc_r>
 8006d66:	4604      	mov	r4, r0
 8006d68:	b140      	cbz	r0, 8006d7c <__sfmoreglue+0x28>
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d70:	300c      	adds	r0, #12
 8006d72:	60a0      	str	r0, [r4, #8]
 8006d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d78:	f7ff f9dc 	bl	8006134 <memset>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}

08006d80 <__sfp_lock_acquire>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__sfp_lock_acquire+0x8>)
 8006d82:	f000 b8b3 	b.w	8006eec <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	200002a1 	.word	0x200002a1

08006d8c <__sfp_lock_release>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__sfp_lock_release+0x8>)
 8006d8e:	f000 b8ae 	b.w	8006eee <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	200002a1 	.word	0x200002a1

08006d98 <__sinit_lock_acquire>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__sinit_lock_acquire+0x8>)
 8006d9a:	f000 b8a7 	b.w	8006eec <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	200002a2 	.word	0x200002a2

08006da4 <__sinit_lock_release>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__sinit_lock_release+0x8>)
 8006da6:	f000 b8a2 	b.w	8006eee <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	200002a2 	.word	0x200002a2

08006db0 <__sinit>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4604      	mov	r4, r0
 8006db4:	f7ff fff0 	bl	8006d98 <__sinit_lock_acquire>
 8006db8:	69a3      	ldr	r3, [r4, #24]
 8006dba:	b11b      	cbz	r3, 8006dc4 <__sinit+0x14>
 8006dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc0:	f7ff bff0 	b.w	8006da4 <__sinit_lock_release>
 8006dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <__sinit+0x68>)
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <__sinit+0x6c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	bf04      	itt	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	61a3      	streq	r3, [r4, #24]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f820 	bl	8006e20 <__sfp>
 8006de0:	6060      	str	r0, [r4, #4]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f81c 	bl	8006e20 <__sfp>
 8006de8:	60a0      	str	r0, [r4, #8]
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f818 	bl	8006e20 <__sfp>
 8006df0:	2200      	movs	r2, #0
 8006df2:	60e0      	str	r0, [r4, #12]
 8006df4:	2104      	movs	r1, #4
 8006df6:	6860      	ldr	r0, [r4, #4]
 8006df8:	f7ff ff82 	bl	8006d00 <std>
 8006dfc:	68a0      	ldr	r0, [r4, #8]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	2109      	movs	r1, #9
 8006e02:	f7ff ff7d 	bl	8006d00 <std>
 8006e06:	68e0      	ldr	r0, [r4, #12]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	2112      	movs	r1, #18
 8006e0c:	f7ff ff78 	bl	8006d00 <std>
 8006e10:	2301      	movs	r3, #1
 8006e12:	61a3      	str	r3, [r4, #24]
 8006e14:	e7d2      	b.n	8006dbc <__sinit+0xc>
 8006e16:	bf00      	nop
 8006e18:	0800727c 	.word	0x0800727c
 8006e1c:	08006d49 	.word	0x08006d49

08006e20 <__sfp>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	4607      	mov	r7, r0
 8006e24:	f7ff ffac 	bl	8006d80 <__sfp_lock_acquire>
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <__sfp+0x84>)
 8006e2a:	681e      	ldr	r6, [r3, #0]
 8006e2c:	69b3      	ldr	r3, [r6, #24]
 8006e2e:	b913      	cbnz	r3, 8006e36 <__sfp+0x16>
 8006e30:	4630      	mov	r0, r6
 8006e32:	f7ff ffbd 	bl	8006db0 <__sinit>
 8006e36:	3648      	adds	r6, #72	; 0x48
 8006e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	d503      	bpl.n	8006e48 <__sfp+0x28>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	b30b      	cbz	r3, 8006e88 <__sfp+0x68>
 8006e44:	6836      	ldr	r6, [r6, #0]
 8006e46:	e7f7      	b.n	8006e38 <__sfp+0x18>
 8006e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e4c:	b9d5      	cbnz	r5, 8006e84 <__sfp+0x64>
 8006e4e:	4b16      	ldr	r3, [pc, #88]	; (8006ea8 <__sfp+0x88>)
 8006e50:	60e3      	str	r3, [r4, #12]
 8006e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e56:	6665      	str	r5, [r4, #100]	; 0x64
 8006e58:	f000 f847 	bl	8006eea <__retarget_lock_init_recursive>
 8006e5c:	f7ff ff96 	bl	8006d8c <__sfp_lock_release>
 8006e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e68:	6025      	str	r5, [r4, #0]
 8006e6a:	61a5      	str	r5, [r4, #24]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e74:	f7ff f95e 	bl	8006134 <memset>
 8006e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e80:	4620      	mov	r0, r4
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	3468      	adds	r4, #104	; 0x68
 8006e86:	e7d9      	b.n	8006e3c <__sfp+0x1c>
 8006e88:	2104      	movs	r1, #4
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	f7ff ff62 	bl	8006d54 <__sfmoreglue>
 8006e90:	4604      	mov	r4, r0
 8006e92:	6030      	str	r0, [r6, #0]
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d1d5      	bne.n	8006e44 <__sfp+0x24>
 8006e98:	f7ff ff78 	bl	8006d8c <__sfp_lock_release>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	e7ee      	b.n	8006e80 <__sfp+0x60>
 8006ea2:	bf00      	nop
 8006ea4:	0800727c 	.word	0x0800727c
 8006ea8:	ffff0001 	.word	0xffff0001

08006eac <_fwalk_reent>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	4688      	mov	r8, r1
 8006eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eb8:	2700      	movs	r7, #0
 8006eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8006ec2:	d505      	bpl.n	8006ed0 <_fwalk_reent+0x24>
 8006ec4:	6824      	ldr	r4, [r4, #0]
 8006ec6:	2c00      	cmp	r4, #0
 8006ec8:	d1f7      	bne.n	8006eba <_fwalk_reent+0xe>
 8006eca:	4638      	mov	r0, r7
 8006ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed0:	89ab      	ldrh	r3, [r5, #12]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d907      	bls.n	8006ee6 <_fwalk_reent+0x3a>
 8006ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eda:	3301      	adds	r3, #1
 8006edc:	d003      	beq.n	8006ee6 <_fwalk_reent+0x3a>
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	47c0      	blx	r8
 8006ee4:	4307      	orrs	r7, r0
 8006ee6:	3568      	adds	r5, #104	; 0x68
 8006ee8:	e7e9      	b.n	8006ebe <_fwalk_reent+0x12>

08006eea <__retarget_lock_init_recursive>:
 8006eea:	4770      	bx	lr

08006eec <__retarget_lock_acquire_recursive>:
 8006eec:	4770      	bx	lr

08006eee <__retarget_lock_release_recursive>:
 8006eee:	4770      	bx	lr

08006ef0 <__swhatbuf_r>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	b096      	sub	sp, #88	; 0x58
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	da08      	bge.n	8006f14 <__swhatbuf_r+0x24>
 8006f02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	061a      	lsls	r2, r3, #24
 8006f0c:	d410      	bmi.n	8006f30 <__swhatbuf_r+0x40>
 8006f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f12:	e00e      	b.n	8006f32 <__swhatbuf_r+0x42>
 8006f14:	466a      	mov	r2, sp
 8006f16:	f000 f907 	bl	8007128 <_fstat_r>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	dbf1      	blt.n	8006f02 <__swhatbuf_r+0x12>
 8006f1e:	9a01      	ldr	r2, [sp, #4]
 8006f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f28:	425a      	negs	r2, r3
 8006f2a:	415a      	adcs	r2, r3
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	e7ee      	b.n	8006f0e <__swhatbuf_r+0x1e>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	2000      	movs	r0, #0
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	b016      	add	sp, #88	; 0x58
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f3c <__smakebuf_r>:
 8006f3c:	898b      	ldrh	r3, [r1, #12]
 8006f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f40:	079d      	lsls	r5, r3, #30
 8006f42:	4606      	mov	r6, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	d507      	bpl.n	8006f58 <__smakebuf_r+0x1c>
 8006f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	2301      	movs	r3, #1
 8006f52:	6163      	str	r3, [r4, #20]
 8006f54:	b002      	add	sp, #8
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	ab01      	add	r3, sp, #4
 8006f5a:	466a      	mov	r2, sp
 8006f5c:	f7ff ffc8 	bl	8006ef0 <__swhatbuf_r>
 8006f60:	9900      	ldr	r1, [sp, #0]
 8006f62:	4605      	mov	r5, r0
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7ff f9cf 	bl	8006308 <_malloc_r>
 8006f6a:	b948      	cbnz	r0, 8006f80 <__smakebuf_r+0x44>
 8006f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f70:	059a      	lsls	r2, r3, #22
 8006f72:	d4ef      	bmi.n	8006f54 <__smakebuf_r+0x18>
 8006f74:	f023 0303 	bic.w	r3, r3, #3
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	e7e3      	b.n	8006f48 <__smakebuf_r+0xc>
 8006f80:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <__smakebuf_r+0x7c>)
 8006f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	6020      	str	r0, [r4, #0]
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	6163      	str	r3, [r4, #20]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	6120      	str	r0, [r4, #16]
 8006f96:	b15b      	cbz	r3, 8006fb0 <__smakebuf_r+0x74>
 8006f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f8d5 	bl	800714c <_isatty_r>
 8006fa2:	b128      	cbz	r0, 8006fb0 <__smakebuf_r+0x74>
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	89a0      	ldrh	r0, [r4, #12]
 8006fb2:	4305      	orrs	r5, r0
 8006fb4:	81a5      	strh	r5, [r4, #12]
 8006fb6:	e7cd      	b.n	8006f54 <__smakebuf_r+0x18>
 8006fb8:	08006d49 	.word	0x08006d49

08006fbc <__malloc_lock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_lock+0x8>)
 8006fbe:	f7ff bf95 	b.w	8006eec <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200002a0 	.word	0x200002a0

08006fc8 <__malloc_unlock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_unlock+0x8>)
 8006fca:	f7ff bf90 	b.w	8006eee <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200002a0 	.word	0x200002a0

08006fd4 <_raise_r>:
 8006fd4:	291f      	cmp	r1, #31
 8006fd6:	b538      	push	{r3, r4, r5, lr}
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	d904      	bls.n	8006fe8 <_raise_r+0x14>
 8006fde:	2316      	movs	r3, #22
 8006fe0:	6003      	str	r3, [r0, #0]
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fea:	b112      	cbz	r2, 8006ff2 <_raise_r+0x1e>
 8006fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ff0:	b94b      	cbnz	r3, 8007006 <_raise_r+0x32>
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 f830 	bl	8007058 <_getpid_r>
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007002:	f000 b817 	b.w	8007034 <_kill_r>
 8007006:	2b01      	cmp	r3, #1
 8007008:	d00a      	beq.n	8007020 <_raise_r+0x4c>
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	d103      	bne.n	8007016 <_raise_r+0x42>
 800700e:	2316      	movs	r3, #22
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	2001      	movs	r0, #1
 8007014:	e7e7      	b.n	8006fe6 <_raise_r+0x12>
 8007016:	2400      	movs	r4, #0
 8007018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800701c:	4628      	mov	r0, r5
 800701e:	4798      	blx	r3
 8007020:	2000      	movs	r0, #0
 8007022:	e7e0      	b.n	8006fe6 <_raise_r+0x12>

08007024 <raise>:
 8007024:	4b02      	ldr	r3, [pc, #8]	; (8007030 <raise+0xc>)
 8007026:	4601      	mov	r1, r0
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	f7ff bfd3 	b.w	8006fd4 <_raise_r>
 800702e:	bf00      	nop
 8007030:	20000010 	.word	0x20000010

08007034 <_kill_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	; (8007054 <_kill_r+0x20>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	4611      	mov	r1, r2
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f7fa fb75 	bl	8001730 <_kill>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d102      	bne.n	8007050 <_kill_r+0x1c>
 800704a:	682b      	ldr	r3, [r5, #0]
 800704c:	b103      	cbz	r3, 8007050 <_kill_r+0x1c>
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	200002a4 	.word	0x200002a4

08007058 <_getpid_r>:
 8007058:	f7fa bb62 	b.w	8001720 <_getpid>

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f894 	bl	8007190 <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	; 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f000 f868 	bl	800716c <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f000 b817 	b.w	80070e4 <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f855 	bl	800716c <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b813 	b.w	8007108 <_close_r>
	...

080070e4 <_write_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d07      	ldr	r5, [pc, #28]	; (8007104 <_write_r+0x20>)
 80070e8:	4604      	mov	r4, r0
 80070ea:	4608      	mov	r0, r1
 80070ec:	4611      	mov	r1, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f7fa fb53 	bl	800179e <_write>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_write_r+0x1e>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_write_r+0x1e>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	200002a4 	.word	0x200002a4

08007108 <_close_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d06      	ldr	r5, [pc, #24]	; (8007124 <_close_r+0x1c>)
 800710c:	2300      	movs	r3, #0
 800710e:	4604      	mov	r4, r0
 8007110:	4608      	mov	r0, r1
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	f7fa fb5f 	bl	80017d6 <_close>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_close_r+0x1a>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_close_r+0x1a>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	200002a4 	.word	0x200002a4

08007128 <_fstat_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d07      	ldr	r5, [pc, #28]	; (8007148 <_fstat_r+0x20>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	f7fa fb5a 	bl	80017ee <_fstat>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d102      	bne.n	8007144 <_fstat_r+0x1c>
 800713e:	682b      	ldr	r3, [r5, #0]
 8007140:	b103      	cbz	r3, 8007144 <_fstat_r+0x1c>
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	200002a4 	.word	0x200002a4

0800714c <_isatty_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d06      	ldr	r5, [pc, #24]	; (8007168 <_isatty_r+0x1c>)
 8007150:	2300      	movs	r3, #0
 8007152:	4604      	mov	r4, r0
 8007154:	4608      	mov	r0, r1
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	f7fa fb59 	bl	800180e <_isatty>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_isatty_r+0x1a>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_isatty_r+0x1a>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	200002a4 	.word	0x200002a4

0800716c <_lseek_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_lseek_r+0x20>)
 8007170:	4604      	mov	r4, r0
 8007172:	4608      	mov	r0, r1
 8007174:	4611      	mov	r1, r2
 8007176:	2200      	movs	r2, #0
 8007178:	602a      	str	r2, [r5, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f7fa fb52 	bl	8001824 <_lseek>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_lseek_r+0x1e>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_lseek_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	200002a4 	.word	0x200002a4

08007190 <_read_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	; (80071b0 <_read_r+0x20>)
 8007194:	4604      	mov	r4, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fa fae0 	bl	8001764 <_read>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_read_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_read_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	200002a4 	.word	0x200002a4

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
